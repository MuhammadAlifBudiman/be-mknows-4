{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import \"reflect-metadata\";\nimport compression from \"compression\";\nimport cookieParser from \"cookie-parser\";\nimport cors from \"cors\";\nimport express from \"express\";\nimport helmet from \"helmet\";\nimport hpp from \"hpp\";\nimport morgan from \"morgan\";\nimport userAgent from \"express-useragent\";\nimport requestIp from \"request-ip\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from \"@config/index\";\nimport { DB } from \"@database\";\nimport { Routes } from \"@interfaces/routes.interface\";\nimport { ErrorMiddleware } from \"@middlewares/error.middleware\";\nimport RateLimitter from \"@middlewares/rate-limitter.middleware\";\n\nimport { logger, stream } from \"@utils/logger\";\n\nexport class App {\n  public app: express.Application;\n  public limit = new RateLimitter();\n\n  private readonly env: string;\n  private readonly port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || \"development\";\n    this.port = PORT || 3000;\n\n    // Wait for DB to be ready before continuing\n    this.initialize().then(() => {\n      this.initializeRateLimitter();\n      this.initializeMiddlewares();\n      this.initializeRoutes(routes);\n      this.initializeErrorHandling();\n    });\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(\"=================================\");\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private async connectToDatabase() {\n    // Dynamically require 'pg' to avoid issues if not installed in production\n    const { Client } = require('pg');\n    const { DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_DATABASE } = process.env;\n\n    // Connect to the default 'postgres' database\n    const client = new Client({\n      host: DB_HOST,\n      port: DB_PORT ? Number(DB_PORT) : undefined,\n      user: DB_USER,\n      password: DB_PASSWORD,\n      database: 'postgres',\n    });\n\n    try {\n      await client.connect();\n      // Check if the target database exists\n      const res = await client.query(\n        'SELECT 1 FROM pg_database WHERE datname = $1',\n        [DB_DATABASE]\n      );\n      if (res.rowCount === 0) {\n        // Database does not exist, create it\n        await client.query(`CREATE DATABASE \"${DB_DATABASE}\"`);\n        logger.info(`Database '${DB_DATABASE}' created successfully.`);\n      } else {\n        logger.info(`Database '${DB_DATABASE}' already exists.`);\n      }\n    } catch (err: any) {\n      logger.error('Error checking/creating database: ' + err.message);\n      process.exit(1);\n    } finally {\n      await client.end();\n    }\n  }\n\n  private async initialize() {\n    // Wait for DB to be ready and sync models\n    while (!DB || !DB.sequelize) {\n      await new Promise((resolve) => setTimeout(resolve, 100));\n    }\n    await DB.sequelize.sync({ alter: true, force: false });\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(morgan(LOG_FORMAT, { stream }));\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n    this.app.use(hpp());\n    this.app.use(helmet());\n    this.app.use(compression());\n    this.app.use(express.json({ limit: \"200mb\", type: \"application/json\" }))\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n    this.app.use(requestIp.mw());\n    this.app.use(userAgent.express());\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach(route => {\n      this.app.use(\"/\", route.router);\n    });\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(ErrorMiddleware);\n  }\n\n  private initializeRateLimitter() {\n    this.app.use(this.limit.default());\n  }\n}"],"names":["App","listen","app","port","logger","info","env","getServer","connectToDatabase","Client","require","DB_HOST","DB_PORT","DB_USER","DB_PASSWORD","DB_DATABASE","process","client","host","Number","undefined","user","password","database","connect","res","query","rowCount","err","error","message","exit","end","initialize","DB","sequelize","Promise","resolve","setTimeout","sync","alter","force","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","hpp","helmet","compression","express","json","limit","type","urlencoded","extended","cookieParser","requestIp","mw","userAgent","initializeRoutes","routes","forEach","route","router","initializeErrorHandling","ErrorMiddleware","initializeRateLimitter","default","constructor","RateLimitter","NODE_ENV","PORT","then"],"mappings":"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"}