{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import \"reflect-metadata\";\nimport compression from \"compression\";\nimport cookieParser from \"cookie-parser\";\nimport cors from \"cors\";\nimport express from \"express\";\nimport helmet from \"helmet\";\nimport hpp from \"hpp\";\nimport morgan from \"morgan\";\nimport userAgent from \"express-useragent\";\nimport requestIp from \"request-ip\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from \"@config/index\";\nimport { Routes } from \"@interfaces/routes.interface\";\nimport { ErrorMiddleware } from \"@middlewares/error.middleware\";\nimport RateLimitter from \"@middlewares/rate-limitter.middleware\";\nimport { logger, stream } from \"@utils/logger\";\nimport { getDB } from \"@/database/db-lazy\";\n\nexport class App {\n  public app: express.Application;\n  public limit = new RateLimitter();\n\n  private readonly env: string;\n  private readonly port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || \"development\";\n    this.port = PORT || 3000;\n\n    // Add DB initialization middleware\n    this.app.use(async (req, res, next) => {\n      try {\n        await getDB();\n        next();\n      } catch (err) {\n        logger.error(\"DB initialization failed: \" + err.message);\n        res.status(500).json({ message: \"Database initialization failed\" });\n      }\n    });\n\n    this.initializeRateLimitter();\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(\"=================================\");\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(morgan(LOG_FORMAT, { stream }));\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n    this.app.use(hpp());\n    this.app.use(helmet());\n    this.app.use(compression());\n    this.app.use(express.json({ limit: \"200mb\", type: \"application/json\" }))\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n    this.app.use(requestIp.mw());\n    this.app.use(userAgent.express());\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach(route => {\n      this.app.use(\"/\", route.router);\n    });\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(ErrorMiddleware);\n  }\n\n  private initializeRateLimitter() {\n    this.app.use(this.limit.default());\n  }\n}"],"names":["App","listen","app","port","logger","info","env","getServer","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","hpp","helmet","compression","express","json","limit","type","urlencoded","extended","cookieParser","requestIp","mw","userAgent","initializeRoutes","routes","forEach","route","router","initializeErrorHandling","ErrorMiddleware","initializeRateLimitter","default","constructor","RateLimitter","NODE_ENV","PORT","req","res","next","getDB","err","error","message","status"],"mappings":"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"}