{"version":3,"sources":["../../src/services/files.service.ts"],"sourcesContent":["// Import Service decorator from typedi for dependency injection\nimport { Service } from \"typedi\";\n// Import function to get database instance lazily\nimport { getDB } from \"@/database/db-lazy\";\n// Import File interface for file data structure\nimport { File } from \"@interfaces/file.interface\";\n// Import custom HTTP exception for error handling\nimport { HttpException } from \"@/exceptions/HttpException\";\n// Import environment variable to determine file storage strategy\nimport { NODE_ENV } from \"@config/index\";\n\n/**\n * Service class for file-related operations.\n * Handles file upload, retrieval by UUID, and user file listing.\n */\n@Service()\nexport class FileService {\n  /**\n   * Uploads a single file for a user and stores its metadata in the database.\n   * @param user_id - The user's ID who uploads the file.\n   * @param file - The uploaded file object from Multer.\n   * @returns Promise<File> - The uploaded file's metadata.\n   */\n  public async uploadSingleFile(user_id: number, file: Express.Multer.File): Promise<File> {\n    const DB = await getDB();\n    const isProduction = NODE_ENV === 'production';\n    const fileUrl = isProduction\n      ? (file as any).location || null\n      : `/uploads/${file.filename}`;\n    const fileName = isProduction ? file.originalname : file.filename;\n\n    const fileData = {\n      user_id,\n      name: fileName,\n      type: file.mimetype,\n      size: file.size,\n      url: fileUrl,\n    };\n\n    const fileUpload = await DB.Files.create(fileData);\n\n    delete fileUpload.dataValues.pk;\n    delete fileUpload.dataValues.name;\n    delete fileUpload.dataValues.user_id;\n\n    return fileUpload;\n  };\n  \n  /**\n   * Retrieves a file's metadata by its UUID.\n   * @param file_uuid - The UUID of the file.\n   * @returns Promise<File> - The file's metadata (name and URL).\n   * @throws HttpException if file is not found.\n   */\n  public async getFileWithUUID(file_uuid: string): Promise<File> {\n    const DB = await getDB();\n    const file = await DB.Files.findOne({\n      attributes: [\"name\", \"url\"],\n      where: {\n        uuid: file_uuid\n      }\n    });\n\n    if(!file) throw new HttpException(false, 400, \"File is not found\");\n    return file;\n  };\n\n  /**\n   * Retrieves all files uploaded by a specific user.\n   * @param user_id - The user's ID.\n   * @returns Promise<File[]> - Array of file metadata objects.\n   */\n  public async getUserFiles(user_id: number): Promise<File[]> {\n    const DB = await getDB();\n    const files = await DB.Files.findAll({\n      attributes: { exclude: [\"pk\", \"user_id\", \"name\"] },\n      where: {\n        user_id\n      }\n    });\n\n    return files;\n  };\n};"],"names":["FileService","uploadSingleFile","user_id","file","DB","getDB","isProduction","NODE_ENV","fileUrl","location","filename","fileName","originalname","fileData","name","type","mimetype","size","url","fileUpload","Files","create","dataValues","pk","getFileWithUUID","file_uuid","findOne","attributes","where","uuid","HttpException","getUserFiles","files","findAll","exclude"],"mappings":";;;;+BAgBaA;;;eAAAA;;;wBAfW;wBAEF;+BAIQ;uBAEL;;;;;;;AAOlB,IAAA,AAAMA,cAAN,MAAMA;IAOX,MAAaC,iBAAiBC,OAAe,EAAEC,IAAyB,EAAiB;QACvF,MAAMC,KAAK,MAAMC,IAAAA,aAAK;QACtB,MAAMC,eAAeC,eAAQ,KAAK;QAClC,MAAMC,UAAUF,eACZ,AAACH,KAAaM,QAAQ,IAAI,OAC1B,CAAC,SAAS,EAAEN,KAAKO,QAAQ,EAAE;QAC/B,MAAMC,WAAWL,eAAeH,KAAKS,YAAY,GAAGT,KAAKO,QAAQ;QAEjE,MAAMG,WAAW;YACfX;YACAY,MAAMH;YACNI,MAAMZ,KAAKa,QAAQ;YACnBC,MAAMd,KAAKc,IAAI;YACfC,KAAKV;QACP;QAEA,MAAMW,aAAa,MAAMf,GAAGgB,KAAK,CAACC,MAAM,CAACR;QAEzC,OAAOM,WAAWG,UAAU,CAACC,EAAE;QAC/B,OAAOJ,WAAWG,UAAU,CAACR,IAAI;QACjC,OAAOK,WAAWG,UAAU,CAACpB,OAAO;QAEpC,OAAOiB;IACT;IAQA,MAAaK,gBAAgBC,SAAiB,EAAiB;QAC7D,MAAMrB,KAAK,MAAMC,IAAAA,aAAK;QACtB,MAAMF,OAAO,MAAMC,GAAGgB,KAAK,CAACM,OAAO,CAAC;YAClCC,YAAY;gBAAC;gBAAQ;aAAM;YAC3BC,OAAO;gBACLC,MAAMJ;YACR;QACF;QAEA,IAAG,CAACtB,MAAM,MAAM,IAAI2B,4BAAa,CAAC,OAAO,KAAK;QAC9C,OAAO3B;IACT;IAOA,MAAa4B,aAAa7B,OAAe,EAAmB;QAC1D,MAAME,KAAK,MAAMC,IAAAA,aAAK;QACtB,MAAM2B,QAAQ,MAAM5B,GAAGgB,KAAK,CAACa,OAAO,CAAC;YACnCN,YAAY;gBAAEO,SAAS;oBAAC;oBAAM;oBAAW;iBAAO;YAAC;YACjDN,OAAO;gBACL1B;YACF;QACF;QAEA,OAAO8B;IACT;AACF"}