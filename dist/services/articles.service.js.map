{"version":3,"sources":["../../src/services/articles.service.ts"],"sourcesContent":["import { Op, Sequelize } from \"sequelize\";\nimport { Service } from \"typedi\";\nimport { getDB } from \"@/database/db-lazy\";\n\nimport { ArticleModel } from \"@models/articles.model\";\n\nimport { ArticleParsed, ArticlePopularQueryParams, ArticleQueryParams } from \"@interfaces/article.interface\";\nimport { Pagination } from \"@interfaces/common/pagination.interface\";\nimport { CreateArticleDto, UpdateArticleDto } from \"@dtos/articles.dto\";\nimport { HttpException } from \"@exceptions/HttpException\";\n\n\n@Service()\nexport class ArticleService {\n  private articleParsed(article: ArticleModel): ArticleParsed {\n    return {\n      uuid: article.uuid,\n      title: article.title,\n      description: article.description,\n      content: article.content,\n\n      thumbnail: article.thumbnail?.uuid, \n      author: {\n        uuid: article.author.uuid,\n        full_name: article.author.full_name || null,\n        avatar: article.author.avatar?.uuid || null, \n      },\n      categories: article.categories.map((articleCategory) => articleCategory.category),\n      views: article.views || 0,\n      likes: article.likes || 0,\n      comments: article.comments || 0,\n      bookmarks: article.bookmarks || 0\n    };\n  }\n\n  public async getArticles(query: ArticleQueryParams): Promise<{ articles: ArticleParsed[], pagination: Pagination }> {\n    const { page = \"1\", limit = \"10\", search, order, sort } = query;\n    const offset = (parseInt(page) - 1) * parseInt(limit);\n\n    const where = {};\n\n    if(search) {\n      where[Op.or] = [];\n\n      where[Op.or].push({\n        [Op.or]: [\n          {\n            title: {\n              [Op.iLike]: `%${search}%`,\n            },\n          },\n          {\n            description: {\n              [Op.iLike]: `%${search}%`,\n            },\n          },\n          {\n            content: {\n              [Op.iLike]: `%${search}%`,\n            },\n          },\n        ],\n      });\n\n      where[Op.or].push({\n        [Op.or]: [\n          {\n            \"$author.full_name$\": {\n              [Op.iLike]: `%${search}%`,\n            },\n          }\n        ],\n      });\n    }\n\n    const orderClause = [];\n    \n    if (order && sort) {\n      if (sort === \"asc\" || sort === \"desc\") {\n        orderClause.push([order, sort]);\n      }\n    }\n\n    const { rows: articles, count } = await (await getDB()).Articles.findAndCountAll({ \n      where,\n      limit: parseInt(limit),\n      offset,\n      order: orderClause\n    });\n\n    const likeCountPromises = articles.map(async article => {\n      return (await getDB()).ArticlesLikes.count({\n        where: { article_id: article.pk }\n      });\n    });\n    \n    const likeCounts = await Promise.all(likeCountPromises);\n    \n    articles.forEach((article, index) => {\n      article.likes = likeCounts[index];\n    });\n\n    const commentCountPromises = articles.map(async article => {\n      return (await getDB()).ArticlesComments.count({\n        where: { article_id: article.pk }\n      });\n    });\n\n    const commentCounts = await Promise.all(commentCountPromises);\n\n    articles.forEach((article, index) => {\n      article.comments = commentCounts[index];\n    });\n\n    const viewCountPromises = articles.map(async article => {\n      return (await getDB()).ArticlesViews.count({\n        where: { article_id: article.pk }\n      });\n    });\n\n    const viewCounts = await Promise.all(viewCountPromises);\n\n    articles.forEach((article, index) => {\n      article.views = viewCounts[index];\n    });\n\n    const bookmarkCountPromises = articles.map(async article => {\n      return (await getDB()).ArticlesBookmarks.count({\n        where: { article_id: article.pk }\n      });\n    });\n\n    const bookmarkCounts = await Promise.all(bookmarkCountPromises);\n\n    articles.forEach((article, index) => {\n      article.bookmarks = bookmarkCounts[index];\n    });\n\n    const pagination: Pagination = {\n      current_page: parseInt(page),\n      size_page: articles.length,\n      max_page: Math.ceil(count / parseInt(limit)),\n      total_data: count,\n    };\n\n    const transformedArticles = articles.map(article => this.articleParsed(article));\n    return { articles: transformedArticles, pagination };\n  }\n\n  public async getArticleById(article_id: string): Promise<ArticleParsed> {\n    const article = await (await getDB()).Articles.findOne({\n      where: { uuid: article_id },\n    })\n\n    if(!article) {\n      throw new HttpException(false, 404, \"Article is not found\");\n    }\n\n    const likesCount = await (await getDB()).ArticlesLikes.count({\n      where: { article_id: article.pk }\n    });\n        \n    article.likes = likesCount;\n\n    const commentsCount = await (await getDB()).ArticlesComments.count({\n      where: { article_id: article.pk }\n    });\n\n    article.comments = commentsCount;\n\n    const viewCount = await (await getDB()).ArticlesViews.count({\n      where: { article_id: article.pk }\n    });\n\n    article.views = viewCount;\n\n    const bookmarkCount = await (await getDB()).ArticlesBookmarks.count({\n      where: { article_id: article.pk }\n    });\n\n    article.bookmarks = bookmarkCount;\n\n    const response = this.articleParsed(article);\n    return response;\n  }\n\n  public async getArticlesByCategory(query: ArticleQueryParams, category_id: string): Promise<{ articles: ArticleParsed[], pagination: Pagination }> {\n    const category = await (await getDB()).Categories.findOne({ attributes: [\"pk\"], where:{ uuid: category_id } });\n    if (!category) {\n      throw new HttpException(false, 400, \"Category is not found\");\n    }\n\n    const articlesCategory = await (await getDB()).ArticlesCategories.findAll({ attributes: [\"article_id\"], where: { category_id: category.pk } });\n\n    if(!articlesCategory) {\n      throw new HttpException(false, 400, \"Article with that category is not found\");\n    }\n\n    const articleIds = articlesCategory.map(articleCategory => articleCategory.article_id);\n\n    const { rows: articles } = await (await getDB()).Articles.findAndCountAll({ \n      where: { \n        pk: { [Op.in]: articleIds }\n      }\n    });\n    \n    const likeCountPromises = articles.map(async article => {\n\n      return (await getDB()).ArticlesLikes.count({\n        where: { article_id: article.pk }\n      });\n    });\n\n    const likeCounts = await Promise.all(likeCountPromises);\n    \n    \n    articles.forEach((article, index) => {\n      article.likes = likeCounts[index];\n    });\n\n    const commentCountPromises = articles.map(async article => {\n      return (await getDB()).ArticlesComments.count({\n        where: { article_id: article.pk }\n      });\n    });\n\n    const commentCounts = await Promise.all(commentCountPromises);\n\n    articles.forEach((article, index) => {\n      article.comments = commentCounts[index];\n    });\n\n    const viewCountPromises = articles.map(async article => {\n      return (await getDB()).ArticlesViews.count({\n        where: { article_id: article.pk }\n      });\n    });\n\n    const viewCounts = await Promise.all(viewCountPromises);\n\n    articles.forEach((article, index) => {\n      article.views = viewCounts[index];\n    });\n\n    const bookmarkCountPromises = articles.map(async article => {\n      return (await getDB()).ArticlesBookmarks.count({\n        where: { article_id: article.pk }\n      });\n    });\n\n    const bookmarkCounts = await Promise.all(bookmarkCountPromises);\n\n    articles.forEach((article, index) => {\n      article.bookmarks = bookmarkCounts[index];\n    });\n\n\n    const transformedArticles = articles.map(article => this.articleParsed(article));\n    return { articles: transformedArticles, pagination: null };\n  }\n\n  public async createArticle(author_id: number, data: CreateArticleDto): Promise<ArticleParsed> {\n    const thumbnail = await (await getDB()).Files.findOne({ attributes: [\"pk\"], where: { uuid: data.thumbnail }});\n    if(!thumbnail) throw new HttpException(false, 404, \"File is not found\");\n    \n    const categories = await (await getDB()).Categories.findAll({\n      attributes: [\"pk\"],\n      where: {\n        uuid: { [Op.in]: data.categories }\n      }\n    })\n\n    if (categories.length <= 0) {\n      throw new HttpException(false, 404, \"Categories is not found\");\n    }\n\n    const transaction = await (await getDB()).sequelize.transaction();\n\n    try {\n      const article = await (await getDB()).Articles.create({\n        title: data.title,\n        description: data.description,\n        content: data.content,\n        thumbnail_id: thumbnail.pk,\n        author_id\n      }, { transaction});\n\n      const categoryIds = categories.map(category => category.pk);\n\n      await (await getDB()).ArticlesCategories.bulkCreate(\n        categoryIds.map(categoryId => ({\n          article_id: article.pk,\n          category_id: categoryId\n        })),\n        { transaction }\n      );\n\n      await transaction.commit();\n      return this.getArticleById(article.uuid);\n    } catch (error) {\n      await transaction.rollback();\n      throw error; \n    }\n  }\n  \n  public async updateArticle(article_id: string, author_id: number, data: UpdateArticleDto): Promise<ArticleParsed> {\n    const article = await (await getDB()).Articles.findOne({ where: { uuid: article_id }});\n\n    if(!article) {\n      throw new HttpException(false, 400, \"Article is not found\");\n    }\n    \n    const updatedData: any = {};\n    \n    if (data.title) updatedData.title = data.title;\n    if (data.description) updatedData.description = data.description;\n    if (data.content) updatedData.content = data.content;\n    \n    if (data.thumbnail) {\n      const file = await (await getDB()).Files.findOne({ \n        attributes: [\"pk\"], \n        where: { \n          uuid: data.thumbnail, \n          user_id: author_id \n        } \n      });\n      \n      if (!file) {\n        throw new HttpException(false, 400, \"File is not found\");\n      }\n  \n      updatedData.thumbnail = file.pk;\n    }\n\n    if (Object.keys(updatedData).length === 0) {\n      throw new HttpException(false, 400, \"Some field is required\");\n    }\n\n    const transaction = await (await getDB()).sequelize.transaction();\n    try {\n      if (data.categories) {\n        const categories = await (await getDB()).Categories.findAll({\n          attributes: [\"pk\"],\n          where: {\n            uuid: { [Op.in]: data.categories }\n          }\n        });\n\n        if (!categories || categories.length !== data.categories.length) {\n          throw new HttpException(false, 400, \"Some categories are not found or duplicated\");\n        }\n\n        if (categories.length >= 0) {\n          await (await getDB()).ArticlesCategories.destroy({\n            where: { article_id: article.pk },\n            force: true,\n            transaction\n          });\n\n          const categoryIds = categories.map(category => category.pk);\n\n          await (await getDB()).ArticlesCategories.bulkCreate(\n            categoryIds.map(categoryId => ({\n              article_id: article.pk,\n              category_id: categoryId\n            })), { transaction }\n          );\n        }\n      }\n\n      if (Object.keys(updatedData).length > 0) {\n        await (await getDB()).Articles.update(updatedData, {\n          where: { uuid: article_id },\n          returning: true,\n          transaction,\n        });\n      }\n\n      await transaction.commit();\n\n      return this.getArticleById(article.uuid);\n    } catch (error) {\n      await transaction.rollback();\n      throw error; \n    }\n  }\n\n  public async deleteArticle(article_id: string, author_id: number): Promise<boolean> {\n    const article = await (await getDB()).Articles.findOne({ where: { uuid: article_id, author_id }});\n    if (!article) {\n      throw new HttpException(false, 400, \"Article is not found\");\n    }\n\n    const comments = await (await getDB()).ArticlesComments.findAll({ attributes: [\"pk\"], where: { article_id: article.pk }});\n    const commentIds = comments.map(comment => comment.pk);\n\n    const replies = await (await getDB()).CommentsReplies.findAll({ attributes: [\"pk\"], where: { comment_id: { [Op.in]: commentIds } }});\n    const replyIds = replies.map(reply => reply.pk);\n\n    const transaction = await (await getDB()).sequelize.transaction();\n    try {\n      await article.destroy({ transaction });\n\n      await Promise.all([\n        (await getDB()).ArticlesCategories.destroy({ where: { article_id: article.pk }, transaction }),\n        (await getDB()).ArticlesLikes.destroy({ where: { article_id: article.pk }, transaction }),\n        (await getDB()).ArticlesBookmarks.destroy({ where: { article_id: article.pk }, transaction }),\n        (await getDB()).ArticlesComments.destroy({ where: { article_id: article.pk }, transaction }),\n        (await getDB()).ArticleCommentsLikes.destroy({ where: { comment_id: { [Op.in]: commentIds } }, transaction }),\n        (await getDB()).CommentsReplies.destroy({ where: { comment_id: { [Op.in]: commentIds } }, transaction }),\n        (await getDB()).CommentsRepliesLikes.destroy({ where: { reply_id: { [Op.in]: replyIds } }, transaction }),\n      ]);\n      \n      await transaction.commit();\n\n      return true;\n    } catch (error) {\n      await transaction.rollback();\n      throw error; \n    }\n  }\n\n  public async likeArticle(user_id: number, article_id: string): Promise<object> {\n    const article = await (await getDB()).Articles.findOne({ attributes: [\"pk\"], where: { uuid: article_id } });\n    if (!article) {\n      throw new HttpException(false, 400, \"Article is not found\");\n    }\n\n    const transaction = await (await getDB()).sequelize.transaction();\n    try {\n      const [articleLike, articleLikesCount] = await Promise.all([\n        (await getDB()).ArticlesLikes.findOne({ where: { article_id: article.pk, user_id }, transaction }),\n        (await getDB()).ArticlesLikes.count({ where: { article_id: article.pk, user_id }, transaction })\n      ]);\n  \n      if (!articleLike) {\n        await (await getDB()).ArticlesLikes.create({ article_id: article.pk, user_id }, { transaction });\n        await transaction.commit();\n        return { article_id, is_liked: true, likes: articleLikesCount + 1 }; \n      } else {\n        await (await getDB()).ArticlesLikes.destroy({ where: { article_id: article.pk, user_id }, force: true, transaction });\n        await transaction.commit();\n        return { article_id, is_liked: false, likes: articleLikesCount - 1 }; \n      }\n    } catch (error) {\n      await transaction.rollback();\n      throw error;\n    }\n  }\n\n  public async bookmarkArticle(user_id: number, article_id: string): Promise<object> {\n    const article = await (await getDB()).Articles.findOne({ attributes: [\"pk\"], where: { uuid: article_id } });\n    if (!article) {\n      throw new HttpException(false, 400, \"Article is not found\");\n    }\n\n    const transaction = await (await getDB()).sequelize.transaction();\n    try {\n      const [articleBookmark, articleBookmarksCount] = await Promise.all([\n        (await getDB()).ArticlesBookmarks.findOne({ where: { article_id: article.pk, user_id }, transaction }),\n        (await getDB()).ArticlesBookmarks.count({ where: { article_id: article.pk, user_id }, transaction })\n      ]);\n  \n      if (!articleBookmark) {\n        await (await getDB()).ArticlesBookmarks.create({ article_id: article.pk, user_id }, { transaction });\n        await transaction.commit();\n        return { article_id, is_bookmarked: true, bookmarks: articleBookmarksCount + 1 }; \n      } else {\n        await (await getDB()).ArticlesBookmarks.destroy({ where: { article_id: article.pk, user_id }, force: true, transaction });\n        await transaction.commit();\n        return { article_id, is_bookmarked: false, bookmarks: articleBookmarksCount - 1 }; \n      }\n    } catch (error) {\n      await transaction.rollback();\n      throw error;\n    }\n  }\n\n  public async getBookmarkByMe(user_id: number): Promise<{articles: ArticleParsed[]}> {\n\n    const articleBookmark = await (await getDB()).ArticlesBookmarks.findAll({ attributes: [\"article_id\"], where: { user_id: user_id } });\n\n    const articleIds = articleBookmark.map(articleBookmark => articleBookmark.article_id);\n\n    const articles = await (await getDB()).Articles.findAll({ \n      where: { \n        pk: { [Op.in]: articleIds }\n      }\n    });\n\n    if (!articleBookmark) {\n      throw new HttpException(false, 400, \"Bookmark is empty\");\n    }\n\n    const likeCountPromises = articles.map(async article => {\n      return (await getDB()).ArticlesLikes.count({\n        where: { article_id: article.pk }\n      });\n    });\n    \n    const likeCounts = await Promise.all(likeCountPromises);\n    \n    articles.forEach((article, index) => {\n      article.likes = likeCounts[index];\n    });\n\n    const commentCountPromises = articles.map(async article => {\n      return (await getDB()).ArticlesComments.count({\n        where: { article_id: article.pk }\n      });\n    });\n\n    const commentCounts = await Promise.all(commentCountPromises);\n\n    articles.forEach((article, index) => {\n      article.comments = commentCounts[index];\n    });\n\n    const transformedArticles = articles.map(article => this.articleParsed(article));\n\n    return { articles: transformedArticles };\n  }\n\n  public async addView(article_id: string, user_id: number): Promise<boolean> {\n    const article = await (await getDB()).Articles.findOne({ attributes: [\"pk\"], where: { uuid: article_id } });\n    if (!article) {\n      throw new HttpException(false, 400, \"Article is not found\");\n    }\n\n    (await getDB()).ArticlesViews.create({ article_id: article.pk, user_id });\n    const startDate = new Date(\"2023-01-01\");\n    const endDate = new Date(\"2023-12-31\");\n    console.log(await (await getDB()).ArticlesViews.count({ \n      where: {\n        created_at: {\n          [Op.and]: [\n            { [Op.gte]: startDate }, // Tanggal lebih besar atau sama dengan startDate\n            { [Op.lte]: endDate }    // Tanggal kurang dari atau sama dengan endDate\n          ]\n        }\n      }\n    }))\n\n    return true\n  } \n\n  public async getPopularArticles(query: ArticlePopularQueryParams): Promise<{ articles: ArticleParsed[] }> {\n    const { range } = query;\n    const startDate = this.calculateStartDate(range);\n  \n    const articleViews = await (await getDB()).ArticlesViews.findAll({\n      attributes: ['article_id'],\n      where: {\n        created_at: {\n          [Op.gte]: startDate,\n        },\n      },\n    });\n  \n    if (!articleViews || articleViews.length === 0) {\n      throw new HttpException(false, 400, \"There is no popular article\");\n    }\n  \n    const articleIds = articleViews.map(articleView => articleView.article_id);\n  \n    const articles = await (await getDB()).Articles.findAll({\n      where: {\n        pk: { [Op.in]: articleIds }\n      }\n    });\n  \n    // Hitung berdasarkan date range untuk menentukan popularitas\n    const likeCountPromises = articles.map(async (article) => {\n      const count = await (await getDB()).ArticlesLikes.count({\n        where: {\n          article_id: article.pk,\n          created_at: {\n            [Op.gte]: startDate,\n          },\n        },\n      });\n      return count;\n    });\n  \n    const commentCountPromises = articles.map(async (article) => {\n      const count = await (await getDB()).ArticlesComments.count({\n        where: {\n          article_id: article.pk,\n          created_at: {\n            [Op.gte]: startDate,\n          },\n        },\n      });\n      return count;\n    });\n  \n    const viewCountPromises = articles.map(async (article) => {\n      const count = await (await getDB()).ArticlesViews.count({\n        where: {\n          article_id: article.pk,\n          created_at: {\n            [Op.gte]: startDate,\n          },\n        },\n      });\n      return count;\n    });\n  \n    const bookmarkCountPromises = articles.map(async (article) => {\n      const count = await (await getDB()).ArticlesBookmarks.count({\n        where: {\n          article_id: article.pk,\n          created_at: {\n            [Op.gte]: startDate,\n          },\n        },\n      });\n      return count;\n    });\n  \n    const [likeCounts, commentCounts, viewCounts, bookmarkCounts] = await Promise.all([\n      Promise.all(likeCountPromises),\n      Promise.all(commentCountPromises),\n      Promise.all(viewCountPromises),\n      Promise.all(bookmarkCountPromises),\n    ]);\n  \n    articles.forEach((article, index) => {\n      article.likes = likeCounts[index];\n      article.comments = commentCounts[index];\n      article.views = viewCounts[index];\n      article.bookmarks = bookmarkCounts[index];\n    });\n  \n    const transformedArticles = articles.map(article => this.articleParsed(article));\n  \n    const weight = {\n      views: 1,\n      likes: 2,\n      comments: 3,\n      bookmarks: 4,\n    };\n  \n    // Mengurutkan artikel berdasarkan bobotnya\n    const sortedArticles = transformedArticles.sort((a, b) => {\n      const aPopularity = (weight.views * a.views) + (weight.likes * a.likes) + (weight.comments * a.comments) + (weight.bookmarks * a.bookmarks);\n      const bPopularity = (weight.views * b.views) + (weight.likes * b.likes) + (weight.comments * b.comments) + (weight.bookmarks * b.bookmarks);\n  \n      return bPopularity - aPopularity;\n    });\n\n  \n    // Tampilkan jumlah views, likes, comments, dan bookmarks yang sesuai\n    const totalLikePromises = sortedArticles.map(async (article) => {\n      const articleId = article.uuid;\n      const articlePk = await (await getDB()).Articles.findOne({\n        attributes: [\"pk\"],\n        where: {\n          uuid: articleId,\n        },\n      });\n      return (await getDB()).ArticlesLikes.count({\n        where: {\n          article_id: articlePk.pk,\n        },\n      });\n    });\n\n    const totalCommentPromises = sortedArticles.map(async (article) => {\n      const articleId = article.uuid;\n      const articlePk = await (await getDB()).Articles.findOne({\n        attributes: [\"pk\"],\n        where: {\n          uuid: articleId,\n        },\n      });\n      return (await getDB()).ArticlesComments.count({\n        where: {\n          article_id: articlePk.pk,\n        },\n      });\n    });\n\n    const totalViewPromises = sortedArticles.map(async (article) => {\n      const articleId = article.uuid;\n      const articlePk = await (await getDB()).Articles.findOne({\n        attributes: [\"pk\"],\n        where: {\n          uuid: articleId,\n        },\n      });\n      return (await getDB()).ArticlesViews.count({\n        where: {\n          article_id: articlePk.pk,\n        },\n      });\n    });\n\n    const totalBookmarkPromises = sortedArticles.map(async (article) => {\n      const articleId = article.uuid;\n      const articlePk = await (await getDB()).Articles.findOne({\n        attributes: [\"pk\"],\n        where: {\n          uuid: articleId,\n        },\n      });\n      return (await getDB()).ArticlesBookmarks.count({\n        where: {\n          article_id: articlePk.pk,\n        },\n      });\n    });\n\n    const [totalLikes, totalComments, totalViews, totalBookmarks] = await Promise.all([\n      Promise.all(totalLikePromises),\n      Promise.all(totalCommentPromises),\n      Promise.all(totalViewPromises),\n      Promise.all(totalBookmarkPromises),\n    ]);\n\n    sortedArticles.forEach((article, index) => {\n      article.likes = totalLikes[index];\n      article.comments = totalComments[index];\n      article.views = totalViews[index];\n      article.bookmarks = totalBookmarks[index];\n    });\n\n    return { articles: sortedArticles };\n  }\n  \n\n\n  private calculateStartDate(range: string): Date {\n    const currentDate = new Date();\n    switch (range) {\n      case \"3 days\":\n        return new Date(currentDate.setDate(currentDate.getDate() - 3));\n      case \"1 week\":\n        return new Date(currentDate.setDate(currentDate.getDate() - 7));\n      case \"today\":\n        return new Date(currentDate.setHours(0, 0, 0, 0));\n      default:\n        throw new HttpException(false, 400, \"Range is not valid\");\n    }\n    \n  }\n  \n}"],"names":["ArticleService","articleParsed","article","uuid","title","description","content","thumbnail","author","full_name","avatar","categories","map","articleCategory","category","views","likes","comments","bookmarks","getArticles","query","page","limit","search","order","sort","offset","parseInt","where","Op","or","push","iLike","orderClause","rows","articles","count","getDB","Articles","findAndCountAll","likeCountPromises","ArticlesLikes","article_id","pk","likeCounts","Promise","all","forEach","index","commentCountPromises","ArticlesComments","commentCounts","viewCountPromises","ArticlesViews","viewCounts","bookmarkCountPromises","ArticlesBookmarks","bookmarkCounts","pagination","current_page","size_page","length","max_page","Math","ceil","total_data","transformedArticles","getArticleById","findOne","HttpException","likesCount","commentsCount","viewCount","bookmarkCount","response","getArticlesByCategory","category_id","Categories","attributes","articlesCategory","ArticlesCategories","findAll","articleIds","in","createArticle","author_id","data","Files","transaction","sequelize","create","thumbnail_id","categoryIds","bulkCreate","categoryId","commit","error","rollback","updateArticle","updatedData","file","user_id","Object","keys","destroy","force","update","returning","deleteArticle","commentIds","comment","replies","CommentsReplies","comment_id","replyIds","reply","ArticleCommentsLikes","CommentsRepliesLikes","reply_id","likeArticle","articleLike","articleLikesCount","is_liked","bookmarkArticle","articleBookmark","articleBookmarksCount","is_bookmarked","getBookmarkByMe","addView","startDate","Date","endDate","console","log","created_at","and","gte","lte","getPopularArticles","range","calculateStartDate","articleViews","articleView","weight","sortedArticles","a","b","aPopularity","bPopularity","totalLikePromises","articleId","articlePk","totalCommentPromises","totalViewPromises","totalBookmarkPromises","totalLikes","totalComments","totalViews","totalBookmarks","currentDate","setDate","getDate","setHours"],"mappings":"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"}