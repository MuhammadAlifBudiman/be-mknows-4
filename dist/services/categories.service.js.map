{"version":3,"sources":["../../src/services/categories.service.ts"],"sourcesContent":["import { Service } from \"typedi\";\nimport { getDB } from \"@/database/db-lazy\";\n\nimport { Category } from '@interfaces/category.interface';\nimport { HttpException } from \"@exceptions/HttpException\";\nimport { CreateCategoryDto, UpdateCategoryDto } from '@dtos/categories.dto';\n\n\n@Service()\nexport class CategoryService {\n  public async getCategories(): Promise<Category[]> {\n    return await (await getDB()).Categories.findAll({ \n      attributes: { \n        exclude: [\"pk\"],\n      },\n    });\n  }\n\n  public async createCategory(data: CreateCategoryDto): Promise<Category> {\n    const category = await (await getDB()).Categories.create({ ...data });\n    delete category.dataValues.pk;\n\n    return category;\n  }\n  \n  public async updateCategory(category_id: string, data: UpdateCategoryDto): Promise<Category> {\n    const updatedData: any = {};\n    \n    if (data.name) updatedData.name = data.name;\n    if (data.description) updatedData.description = data.description;\n\n    if (Object.keys(updatedData).length === 0) {\n      throw new HttpException(false, 400, \"Some field is required\");\n    }\n\n    const [_, [category]] = await (await getDB()).Categories.update(updatedData, {\n      where: { uuid: category_id },\n      returning: true,\n    });\n    \n    delete category.dataValues.pk;\n\n    return category;\n  }\n\n  public async deleteCategory(category_id: string): Promise<boolean> {\n    const category = await (await getDB()).Categories.findOne({ where: { uuid: category_id }});\n\n    if(!category) {\n      throw new HttpException(false, 400, \"Category is not found\");\n    }\n\n    await category.destroy();\n    return true;\n  }\n}"],"names":["CategoryService","getCategories","getDB","Categories","findAll","attributes","exclude","createCategory","data","category","create","dataValues","pk","updateCategory","category_id","updatedData","name","description","Object","keys","length","HttpException","_","update","where","uuid","returning","deleteCategory","findOne","destroy"],"mappings":";;;;+BASaA;;;eAAAA;;;wBATW;wBACF;+BAGQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKvB,IAAA,AAAMA,kBAAN,MAAMA;IACX,MAAaC,gBAAqC;QAChD,OAAO,MAAM,AAAC,CAAA,MAAMC,IAAAA,aAAK,GAAC,EAAGC,UAAU,CAACC,OAAO,CAAC;YAC9CC,YAAY;gBACVC,SAAS;oBAAC;iBAAK;YACjB;QACF;IACF;IAEA,MAAaC,eAAeC,IAAuB,EAAqB;QACtE,MAAMC,WAAW,MAAM,AAAC,CAAA,MAAMP,IAAAA,aAAK,GAAC,EAAGC,UAAU,CAACO,MAAM,CAAC,mBAAKF;QAC9D,OAAOC,SAASE,UAAU,CAACC,EAAE;QAE7B,OAAOH;IACT;IAEA,MAAaI,eAAeC,WAAmB,EAAEN,IAAuB,EAAqB;QAC3F,MAAMO,cAAmB,CAAC;QAE1B,IAAIP,KAAKQ,IAAI,EAAED,YAAYC,IAAI,GAAGR,KAAKQ,IAAI;QAC3C,IAAIR,KAAKS,WAAW,EAAEF,YAAYE,WAAW,GAAGT,KAAKS,WAAW;QAEhE,IAAIC,OAAOC,IAAI,CAACJ,aAAaK,MAAM,KAAK,GAAG;YACzC,MAAM,IAAIC,4BAAa,CAAC,OAAO,KAAK;QACtC;QAEA,MAAM,CAACC,GAAG,CAACb,SAAS,CAAC,GAAG,MAAM,AAAC,CAAA,MAAMP,IAAAA,aAAK,GAAC,EAAGC,UAAU,CAACoB,MAAM,CAACR,aAAa;YAC3ES,OAAO;gBAAEC,MAAMX;YAAY;YAC3BY,WAAW;QACb;QAEA,OAAOjB,SAASE,UAAU,CAACC,EAAE;QAE7B,OAAOH;IACT;IAEA,MAAakB,eAAeb,WAAmB,EAAoB;QACjE,MAAML,WAAW,MAAM,AAAC,CAAA,MAAMP,IAAAA,aAAK,GAAC,EAAGC,UAAU,CAACyB,OAAO,CAAC;YAAEJ,OAAO;gBAAEC,MAAMX;YAAY;QAAC;QAExF,IAAG,CAACL,UAAU;YACZ,MAAM,IAAIY,4BAAa,CAAC,OAAO,KAAK;QACtC;QAEA,MAAMZ,SAASoB,OAAO;QACtB,OAAO;IACT;AACF"}