{"version":3,"sources":["../../src/services/account.service.ts"],"sourcesContent":["// Import Service decorator from typedi for dependency injection\nimport { Service } from \"typedi\";\n// Import function to get database instance lazily\nimport { getDB } from \"@/database/db-lazy\";\n// Import User interface for user data structure\nimport { User } from \"@interfaces/user.interface\";\n// Import UserSession interface for session data structure\nimport { UserSession } from \"@interfaces/user-session.interface\";\n// Import UserModel for ORM operations on users table\nimport { UserModel } from \"@models/users.model\";\n// Import UserSessionModel for ORM operations on user sessions table\nimport { UserSessionModel } from \"@models/users_sessions.model\";\n// Import DTO for updating user profile\nimport { UpdateUserProfileDto } from \"@dtos/account.dto\";\n// Import custom HTTP exception for error handling\nimport { HttpException } from \"@/exceptions/HttpException\";\n\n/**\n * Service class for account-related operations.\n * Handles user profile retrieval, session history, and profile updates.\n */\n@Service()\nexport class AccountService {\n  /**\n   * Retrieves a user's profile by their user ID.\n   * @param user_id - The primary key of the user.\n   * @returns Promise<User> - The user's profile data.\n   * @throws HttpException if user is not found.\n   */\n  public async getProfileByUserId(user_id: number): Promise<User> {\n    const DB = await getDB();\n\n    // Find user by primary key, exclude 'pk' from attributes\n    const user: UserModel = await DB.Users.findOne({ \n      attributes: { exclude: [\"pk\"] },\n      where: { pk: user_id }\n    });\n\n    if (!user) {\n      throw new HttpException(false, 404, \"User not found\");\n    }\n\n    // If user has a display picture, get its UUID\n    let displayPictureUuid: string | null = null;\n    if (user.display_picture) {\n      const file = await DB.Files.findOne({ where: { pk: user.display_picture }});\n      displayPictureUuid = file?.uuid || null;\n    }\n\n    // Build response object with user data and display picture UUID\n    const response = {\n      ...user.get(),\n      display_picture: displayPictureUuid,\n    };\n\n    return response;\n  }\n\n  /**\n   * Retrieves session histories for a user by user ID.\n   * @param user_id - The user's primary key.\n   * @param session_id - The current session's UUID.\n   * @returns Promise<UserSession[]> - Array of user session objects.\n   */\n  public async getSessionsHistoriesByUserId(user_id: number, session_id: string): Promise<UserSession[]> {\n    const DB = await getDB();\n    // Find all sessions for the user, exclude 'pk' and 'user_id'\n    const userSessions: UserSessionModel[] = await DB.UsersSessions.findAll({\n      attributes: { exclude: [\"pk\", \"user_id\"] },\n      where: { user_id }\n    });\n\n    // Mark the current session and parse session objects\n    const userSessionsParsed = userSessions.map(session => ({\n      ...session.get(),\n      is_current: session.uuid === session_id\n    }));\n\n    // Sort so current session appears first\n    userSessionsParsed.sort((a, b) => (b.is_current ? 1 : 0) - (a.is_current ? 1 : 0));\n    return userSessionsParsed;\n  }\n\n  /**\n   * Updates a user's profile with provided data.\n   * @param user_id - The user's primary key.\n   * @param data - DTO containing profile update fields.\n   * @returns Promise<User> - The updated user profile.\n   * @throws HttpException if file is not found or no fields are provided.\n   */\n  public async updateUserProfile(user_id: number, data: UpdateUserProfileDto): Promise<User> {\n    const DB = await getDB();\n    const updatedData: any = {};\n  \n    // Update full name if provided\n    if (data.full_name) updatedData.full_name = data.full_name;\n  \n    // Update display picture if provided\n    if (data.display_picture) {\n      const file = await DB.Files.findOne({ attributes: [\"pk\"], where: { uuid: data.display_picture, user_id } });\n  \n      if (!file) {\n        throw new HttpException(false, 400, \"File is not found\");\n      }\n  \n      updatedData.display_picture = file.pk;\n    }\n  \n    // Throw error if no fields are provided\n    if (Object.keys(updatedData).length === 0) {\n      throw new HttpException(false, 400, \"Some field is required\");\n    }\n  \n    // Update user and return updated user object\n    const [_, [user]] = await DB.Users.update(updatedData, {\n      where: { pk: user_id },\n      returning: true,\n    });\n\n    // Remove sensitive fields from user object\n    delete user.dataValues.pk;\n    delete user.dataValues.password;\n\n    // Get display picture UUID if available\n    let displayPictureUuid: string | null = null;\n    if (user.display_picture) {\n      const file = await DB.Files.findOne({ where: { pk: user.display_picture }});\n      displayPictureUuid = file?.uuid || null;\n    }\n    \n    // Build response object with updated user data and display picture UUID\n    const response = {\n      ...user.get(),\n      display_picture: displayPictureUuid,\n    };\n\n    return response;\n  }\n}"],"names":["AccountService","getProfileByUserId","user_id","DB","getDB","user","Users","findOne","attributes","exclude","where","pk","HttpException","displayPictureUuid","display_picture","file","Files","uuid","response","get","getSessionsHistoriesByUserId","session_id","userSessions","UsersSessions","findAll","userSessionsParsed","map","session","is_current","sort","a","b","updateUserProfile","data","updatedData","full_name","Object","keys","length","_","update","returning","dataValues","password"],"mappings":"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"}