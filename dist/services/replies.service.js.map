{"version":3,"sources":["../../src/services/replies.service.ts"],"sourcesContent":["import { DB } from \"@/database\";\nimport { CreateReplyDto, UpdateReplyDto } from \"@/dtos/replies.dto\";\nimport { HttpException } from \"@exceptions/HttpException\";\nimport { CommentReply, CommentReplyParsed } from \"@/interfaces/comment.interface\";\nimport { Service } from \"typedi\";\nimport { CommentReplyModel } from \"@/models/articles_replies.model\";\n\n\n@Service()\nexport class ReplyService {\n  private replyParsed(reply: CommentReplyModel): CommentReplyParsed {\n    return {\n      uuid: reply.uuid,\n      reply: reply.reply,\n      comment: {\n        uuid: reply.comment.uuid,\n        comment: reply.comment.comment,\n      },\n      author: {\n        uuid: reply.author.uuid,\n        full_name: reply.author.full_name || null,\n        avatar: reply.author.avatar?.uuid || null, \n      },\n      likes: reply.likes || 0,\n      };\n    }\n\n  public async getReplies(): Promise<{ replies: CommentReplyParsed[] }> {\n    const reply = await DB.CommentsReplies.findAll({});\n\n    const likeCountPromises = reply.map(reply => {\n      return DB.CommentsRepliesLikes.count({\n        where: { reply_id: reply.pk }\n      });\n    });\n\n    const likesCount = await Promise.all(likeCountPromises);\n\n    reply.forEach((reply, index) => {\n      reply.likes = likesCount[index];\n    });\n\n    const transformedReplies = reply.map(reply => this.replyParsed(reply));\n    return { replies: transformedReplies };\n  }\n\n  public async getRepliesByComment(comment_id: string): Promise<{ replies: CommentReplyParsed[] }> {\n    const comment = await DB.ArticlesComments.findOne({ where: { uuid: comment_id }, attributes: [\"pk\"] });\n    if(!comment) {\n      throw new HttpException(false, 404, \"Comment is not found\");\n    }\n    const replies = await DB.CommentsReplies.findAll({ where: { comment_id: comment.pk } });\n    if(!replies) {\n      throw new HttpException(false, 404, \"Reply is not found\");\n    }\n    const likeCountPromises = replies.map(reply => {\n      return DB.CommentsRepliesLikes.count({\n        where: { reply_id: reply.pk }\n      });\n    });\n\n    const likesCount = await Promise.all(likeCountPromises);\n\n    replies.forEach((reply, index) => {\n      reply.likes = likesCount[index];\n    });\n\n    const transformedReplies = replies.map(reply => this.replyParsed(reply));\n    return { replies: transformedReplies };\n  }\n\n  public async getReplyById(reply_id: string): Promise<CommentReplyParsed> {\n    const reply = await DB.CommentsReplies.findOne({ where: { uuid: reply_id } });\n    if (!reply) {\n      throw new HttpException(false, 400, \"Reply is not found\");\n    }\n\n    const likeCount = await DB.CommentsRepliesLikes.count({\n      where: { reply_id: reply.pk }\n    });\n\n    reply.likes = likeCount;\n\n    const response = this.replyParsed(reply);\n    return response;\n  }\n\n  public async createReply(comment_id: string, author_id: number, data: CreateReplyDto): Promise<CommentReplyParsed> {\n    const comment = await DB.ArticlesComments.findOne({ where: { uuid: comment_id }, attributes: [\"pk\"] });\n    const reply = await DB.CommentsReplies.create({ comment_id: comment.pk, author_id, ...data });\n    delete reply.dataValues.pk;\n\n    return this.getReplyById(reply.uuid);\n  }\n\n  public async updateReply(reply_id: string, data: UpdateReplyDto): Promise<CommentReplyParsed> {\n    const updatedData: any = {};\n    \n    if (data.reply) updatedData.reply = data.reply;\n\n    if (Object.keys(updatedData).length === 0) {\n      throw new HttpException(false, 400, \"Some field is required\");\n    }\n\n    if (Object.keys(updatedData).length > 0) {\n      await DB.CommentsReplies.update(updatedData, {\n        where: { uuid: reply_id },\n        returning: true,\n      });\n    }\n    \n\n    return this.getReplyById(reply_id);\n  }\n\n  public async deleteReply(reply_id: string): Promise<boolean> {\n    const reply = await DB.CommentsReplies.findOne({ where: { uuid: reply_id }});\n\n    if(!reply) {\n        throw new HttpException(false, 400, \"Reply is not found\");\n    }\n\n    const transaction = await DB.sequelize.transaction();\n    try {\n      await reply.destroy({ transaction });\n\n      await Promise.all([\n        DB.CommentsRepliesLikes.destroy({ where: { reply_id: reply.pk }, transaction }),\n      ]);\n      \n      await transaction.commit();\n\n      return true;\n    } catch (error) {\n      await transaction.rollback();\n      throw error; \n    }\n  }\n\n  public async likeReply(reply_id: string, user_id: number): Promise<object> {\n    const reply = await DB.CommentsReplies.findOne({ where: { uuid: reply_id }});\n\n    if(!reply) {\n      throw new HttpException(false, 400, \"Reply is not found\");\n    }\n\n    const transaction = await DB.sequelize.transaction();\n    try {\n      const [replyLike, replyLikeCount] = await Promise.all([\n        DB.CommentsRepliesLikes.findOne({ where: { reply_id: reply.pk, user_id }, transaction }),\n        DB.CommentsRepliesLikes.count({ where: { reply_id: reply.pk, user_id }, transaction })\n      ]);\n\n      if (!replyLike) {\n        await DB.CommentsRepliesLikes.create({ reply_id: reply.pk, user_id }, { transaction });\n        await transaction.commit();\n        return { reply_id, is_liked: true, likes: replyLikeCount + 1 }; \n      } else {\n        await DB.CommentsRepliesLikes.destroy({ where: { reply_id: reply.pk, user_id }, force: true, transaction });\n        await transaction.commit();\n        return { reply_id, is_liked: false, likes: replyLikeCount - 1 }; \n      }\n    }catch(error) {\n      await transaction.rollback();\n      throw error;\n    }\n  }\n}"],"names":["ReplyService","replyParsed","reply","uuid","comment","author","full_name","avatar","likes","getReplies","DB","CommentsReplies","findAll","likeCountPromises","map","CommentsRepliesLikes","count","where","reply_id","pk","likesCount","Promise","all","forEach","index","transformedReplies","replies","getRepliesByComment","comment_id","ArticlesComments","findOne","attributes","HttpException","getReplyById","likeCount","response","createReply","author_id","data","create","dataValues","updateReply","updatedData","Object","keys","length","update","returning","deleteReply","transaction","sequelize","destroy","commit","error","rollback","likeReply","user_id","replyLike","replyLikeCount","is_liked","force"],"mappings":";;;;+BASaA;;;eAAAA;;;0BATM;+BAEW;wBAEN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKjB,IAAA,AAAMA,eAAN,MAAMA;IACHC,YAAYC,KAAwB,EAAsB;YAWpDA;QAVZ,OAAO;YACLC,MAAMD,MAAMC,IAAI;YAChBD,OAAOA,MAAMA,KAAK;YAClBE,SAAS;gBACPD,MAAMD,MAAME,OAAO,CAACD,IAAI;gBACxBC,SAASF,MAAME,OAAO,CAACA,OAAO;YAChC;YACAC,QAAQ;gBACNF,MAAMD,MAAMG,MAAM,CAACF,IAAI;gBACvBG,WAAWJ,MAAMG,MAAM,CAACC,SAAS,IAAI;gBACrCC,QAAQL,EAAAA,uBAAAA,MAAMG,MAAM,CAACE,MAAM,cAAnBL,2CAAAA,qBAAqBC,IAAI,KAAI;YACvC;YACAK,OAAON,MAAMM,KAAK,IAAI;QACtB;IACF;IAEF,MAAaC,aAAyD;QACpE,MAAMP,QAAQ,MAAMQ,YAAE,CAACC,eAAe,CAACC,OAAO,CAAC,CAAC;QAEhD,MAAMC,oBAAoBX,MAAMY,GAAG,CAACZ,CAAAA;YAClC,OAAOQ,YAAE,CAACK,oBAAoB,CAACC,KAAK,CAAC;gBACnCC,OAAO;oBAAEC,UAAUhB,MAAMiB,EAAE;gBAAC;YAC9B;QACF;QAEA,MAAMC,aAAa,MAAMC,QAAQC,GAAG,CAACT;QAErCX,MAAMqB,OAAO,CAAC,CAACrB,OAAOsB;YACpBtB,MAAMM,KAAK,GAAGY,UAAU,CAACI,MAAM;QACjC;QAEA,MAAMC,qBAAqBvB,MAAMY,GAAG,CAACZ,CAAAA,QAAS,IAAI,CAACD,WAAW,CAACC;QAC/D,OAAO;YAAEwB,SAASD;QAAmB;IACvC;IAEA,MAAaE,oBAAoBC,UAAkB,EAA8C;QAC/F,MAAMxB,UAAU,MAAMM,YAAE,CAACmB,gBAAgB,CAACC,OAAO,CAAC;YAAEb,OAAO;gBAAEd,MAAMyB;YAAW;YAAGG,YAAY;gBAAC;aAAK;QAAC;QACpG,IAAG,CAAC3B,SAAS;YACX,MAAM,IAAI4B,4BAAa,CAAC,OAAO,KAAK;QACtC;QACA,MAAMN,UAAU,MAAMhB,YAAE,CAACC,eAAe,CAACC,OAAO,CAAC;YAAEK,OAAO;gBAAEW,YAAYxB,QAAQe,EAAE;YAAC;QAAE;QACrF,IAAG,CAACO,SAAS;YACX,MAAM,IAAIM,4BAAa,CAAC,OAAO,KAAK;QACtC;QACA,MAAMnB,oBAAoBa,QAAQZ,GAAG,CAACZ,CAAAA;YACpC,OAAOQ,YAAE,CAACK,oBAAoB,CAACC,KAAK,CAAC;gBACnCC,OAAO;oBAAEC,UAAUhB,MAAMiB,EAAE;gBAAC;YAC9B;QACF;QAEA,MAAMC,aAAa,MAAMC,QAAQC,GAAG,CAACT;QAErCa,QAAQH,OAAO,CAAC,CAACrB,OAAOsB;YACtBtB,MAAMM,KAAK,GAAGY,UAAU,CAACI,MAAM;QACjC;QAEA,MAAMC,qBAAqBC,QAAQZ,GAAG,CAACZ,CAAAA,QAAS,IAAI,CAACD,WAAW,CAACC;QACjE,OAAO;YAAEwB,SAASD;QAAmB;IACvC;IAEA,MAAaQ,aAAaf,QAAgB,EAA+B;QACvE,MAAMhB,QAAQ,MAAMQ,YAAE,CAACC,eAAe,CAACmB,OAAO,CAAC;YAAEb,OAAO;gBAAEd,MAAMe;YAAS;QAAE;QAC3E,IAAI,CAAChB,OAAO;YACV,MAAM,IAAI8B,4BAAa,CAAC,OAAO,KAAK;QACtC;QAEA,MAAME,YAAY,MAAMxB,YAAE,CAACK,oBAAoB,CAACC,KAAK,CAAC;YACpDC,OAAO;gBAAEC,UAAUhB,MAAMiB,EAAE;YAAC;QAC9B;QAEAjB,MAAMM,KAAK,GAAG0B;QAEd,MAAMC,WAAW,IAAI,CAAClC,WAAW,CAACC;QAClC,OAAOiC;IACT;IAEA,MAAaC,YAAYR,UAAkB,EAAES,SAAiB,EAAEC,IAAoB,EAA+B;QACjH,MAAMlC,UAAU,MAAMM,YAAE,CAACmB,gBAAgB,CAACC,OAAO,CAAC;YAAEb,OAAO;gBAAEd,MAAMyB;YAAW;YAAGG,YAAY;gBAAC;aAAK;QAAC;QACpG,MAAM7B,QAAQ,MAAMQ,YAAE,CAACC,eAAe,CAAC4B,MAAM,CAAC;YAAEX,YAAYxB,QAAQe,EAAE;YAAEkB;WAAcC;QACtF,OAAOpC,MAAMsC,UAAU,CAACrB,EAAE;QAE1B,OAAO,IAAI,CAACc,YAAY,CAAC/B,MAAMC,IAAI;IACrC;IAEA,MAAasC,YAAYvB,QAAgB,EAAEoB,IAAoB,EAA+B;QAC5F,MAAMI,cAAmB,CAAC;QAE1B,IAAIJ,KAAKpC,KAAK,EAAEwC,YAAYxC,KAAK,GAAGoC,KAAKpC,KAAK;QAE9C,IAAIyC,OAAOC,IAAI,CAACF,aAAaG,MAAM,KAAK,GAAG;YACzC,MAAM,IAAIb,4BAAa,CAAC,OAAO,KAAK;QACtC;QAEA,IAAIW,OAAOC,IAAI,CAACF,aAAaG,MAAM,GAAG,GAAG;YACvC,MAAMnC,YAAE,CAACC,eAAe,CAACmC,MAAM,CAACJ,aAAa;gBAC3CzB,OAAO;oBAAEd,MAAMe;gBAAS;gBACxB6B,WAAW;YACb;QACF;QAGA,OAAO,IAAI,CAACd,YAAY,CAACf;IAC3B;IAEA,MAAa8B,YAAY9B,QAAgB,EAAoB;QAC3D,MAAMhB,QAAQ,MAAMQ,YAAE,CAACC,eAAe,CAACmB,OAAO,CAAC;YAAEb,OAAO;gBAAEd,MAAMe;YAAS;QAAC;QAE1E,IAAG,CAAChB,OAAO;YACP,MAAM,IAAI8B,4BAAa,CAAC,OAAO,KAAK;QACxC;QAEA,MAAMiB,cAAc,MAAMvC,YAAE,CAACwC,SAAS,CAACD,WAAW;QAClD,IAAI;YACF,MAAM/C,MAAMiD,OAAO,CAAC;gBAAEF;YAAY;YAElC,MAAM5B,QAAQC,GAAG,CAAC;gBAChBZ,YAAE,CAACK,oBAAoB,CAACoC,OAAO,CAAC;oBAAElC,OAAO;wBAAEC,UAAUhB,MAAMiB,EAAE;oBAAC;oBAAG8B;gBAAY;aAC9E;YAED,MAAMA,YAAYG,MAAM;YAExB,OAAO;QACT,EAAE,OAAOC,OAAO;YACd,MAAMJ,YAAYK,QAAQ;YAC1B,MAAMD;QACR;IACF;IAEA,MAAaE,UAAUrC,QAAgB,EAAEsC,OAAe,EAAmB;QACzE,MAAMtD,QAAQ,MAAMQ,YAAE,CAACC,eAAe,CAACmB,OAAO,CAAC;YAAEb,OAAO;gBAAEd,MAAMe;YAAS;QAAC;QAE1E,IAAG,CAAChB,OAAO;YACT,MAAM,IAAI8B,4BAAa,CAAC,OAAO,KAAK;QACtC;QAEA,MAAMiB,cAAc,MAAMvC,YAAE,CAACwC,SAAS,CAACD,WAAW;QAClD,IAAI;YACF,MAAM,CAACQ,WAAWC,eAAe,GAAG,MAAMrC,QAAQC,GAAG,CAAC;gBACpDZ,YAAE,CAACK,oBAAoB,CAACe,OAAO,CAAC;oBAAEb,OAAO;wBAAEC,UAAUhB,MAAMiB,EAAE;wBAAEqC;oBAAQ;oBAAGP;gBAAY;gBACtFvC,YAAE,CAACK,oBAAoB,CAACC,KAAK,CAAC;oBAAEC,OAAO;wBAAEC,UAAUhB,MAAMiB,EAAE;wBAAEqC;oBAAQ;oBAAGP;gBAAY;aACrF;YAED,IAAI,CAACQ,WAAW;gBACd,MAAM/C,YAAE,CAACK,oBAAoB,CAACwB,MAAM,CAAC;oBAAErB,UAAUhB,MAAMiB,EAAE;oBAAEqC;gBAAQ,GAAG;oBAAEP;gBAAY;gBACpF,MAAMA,YAAYG,MAAM;gBACxB,OAAO;oBAAElC;oBAAUyC,UAAU;oBAAMnD,OAAOkD,iBAAiB;gBAAE;YAC/D,OAAO;gBACL,MAAMhD,YAAE,CAACK,oBAAoB,CAACoC,OAAO,CAAC;oBAAElC,OAAO;wBAAEC,UAAUhB,MAAMiB,EAAE;wBAAEqC;oBAAQ;oBAAGI,OAAO;oBAAMX;gBAAY;gBACzG,MAAMA,YAAYG,MAAM;gBACxB,OAAO;oBAAElC;oBAAUyC,UAAU;oBAAOnD,OAAOkD,iBAAiB;gBAAE;YAChE;QACF,EAAC,OAAML,OAAO;YACZ,MAAMJ,YAAYK,QAAQ;YAC1B,MAAMD;QACR;IACF;AACF"}