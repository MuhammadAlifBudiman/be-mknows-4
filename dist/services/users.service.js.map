{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from \"bcrypt\";\nimport { Service } from \"typedi\";\nimport { DB } from \"@database\";\nimport { CreateUserDto } from \"@dtos/users.dto\";\nimport { HttpException } from \"@/exceptions/HttpException\";\nimport { User } from \"@interfaces/user.interface\";\n\n@Service()\nexport class UserService {\n  public async findAllUser(): Promise<User[]> {\n    const allUser: User[] = await DB.Users.findAll();\n    return allUser;\n  }\n\n  public async findUserById(userId: number): Promise<User> {\n    const findUser: User = await DB.Users.findByPk(userId);\n    if (!findUser) throw new HttpException(false, 409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    const findUser: User = await DB.Users.findOne({ where: { email: userData.email } });\n    if (findUser) throw new HttpException(false, 409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await DB.Users.create({ ...userData, password: hashedPassword });\n    return createUserData;\n  }\n\n  public async updateUser(userId: number, userData: CreateUserDto): Promise<User> {\n    const findUser: User = await DB.Users.findByPk(userId);\n    if (!findUser) throw new HttpException(false, 409, \"User doesn't exist\");\n\n    const hashedPassword = await hash(userData.password, 10);\n    await DB.Users.update({ ...userData, password: hashedPassword }, { where: { pk: userId } });\n\n    const updateUser: User = await DB.Users.findByPk(userId);\n    return updateUser;\n  }\n\n  public async deleteUser(userId: number): Promise<User> {\n    const findUser: User = await DB.Users.findByPk(userId);\n    if (!findUser) throw new HttpException(false, 409, \"User doesn't exist\");\n\n    await DB.Users.destroy({ where: { pk: userId } });\n\n    return findUser;\n  }\n}"],"names":["UserService","findAllUser","allUser","DB","Users","findAll","findUserById","userId","findUser","findByPk","HttpException","createUser","userData","findOne","where","email","hashedPassword","hash","password","createUserData","create","updateUser","update","pk","deleteUser","destroy"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARQ;wBACG;0BACL;+BAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIvB,IAAA,AAAMA,cAAN,MAAMA;IACX,MAAaC,cAA+B;QAC1C,MAAMC,UAAkB,MAAMC,YAAE,CAACC,KAAK,CAACC,OAAO;QAC9C,OAAOH;IACT;IAEA,MAAaI,aAAaC,MAAc,EAAiB;QACvD,MAAMC,WAAiB,MAAML,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QAC/C,IAAI,CAACC,UAAU,MAAM,IAAIE,4BAAa,CAAC,OAAO,KAAK;QAEnD,OAAOF;IACT;IAEA,MAAaG,WAAWC,QAAuB,EAAiB;QAC9D,MAAMJ,WAAiB,MAAML,YAAE,CAACC,KAAK,CAACS,OAAO,CAAC;YAAEC,OAAO;gBAAEC,OAAOH,SAASG,KAAK;YAAC;QAAE;QACjF,IAAIP,UAAU,MAAM,IAAIE,4BAAa,CAAC,OAAO,KAAK,CAAC,WAAW,EAAEE,SAASG,KAAK,CAAC,eAAe,CAAC;QAE/F,MAAMC,iBAAiB,MAAMC,IAAAA,YAAI,EAACL,SAASM,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAMhB,YAAE,CAACC,KAAK,CAACgB,MAAM,CAAC,wCAAKR;YAAUM,UAAUF;;QAC5E,OAAOG;IACT;IAEA,MAAaE,WAAWd,MAAc,EAAEK,QAAuB,EAAiB;QAC9E,MAAMJ,WAAiB,MAAML,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QAC/C,IAAI,CAACC,UAAU,MAAM,IAAIE,4BAAa,CAAC,OAAO,KAAK;QAEnD,MAAMM,iBAAiB,MAAMC,IAAAA,YAAI,EAACL,SAASM,QAAQ,EAAE;QACrD,MAAMf,YAAE,CAACC,KAAK,CAACkB,MAAM,CAAC,wCAAKV;YAAUM,UAAUF;YAAkB;YAAEF,OAAO;gBAAES,IAAIhB;YAAO;QAAE;QAEzF,MAAMc,aAAmB,MAAMlB,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QACjD,OAAOc;IACT;IAEA,MAAaG,WAAWjB,MAAc,EAAiB;QACrD,MAAMC,WAAiB,MAAML,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QAC/C,IAAI,CAACC,UAAU,MAAM,IAAIE,4BAAa,CAAC,OAAO,KAAK;QAEnD,MAAMP,YAAE,CAACC,KAAK,CAACqB,OAAO,CAAC;YAAEX,OAAO;gBAAES,IAAIhB;YAAO;QAAE;QAE/C,OAAOC;IACT;AACF"}