{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["// Import bcrypt for password hashing\nimport { hash } from \"bcrypt\";\n// Import Service decorator from typedi for dependency injection\nimport { Service } from \"typedi\";\n// Import function to get database instance lazily\nimport { getDB } from \"@/database/db-lazy\";\n// Import DTO for user creation and update\nimport { CreateUserDto } from \"@dtos/users.dto\";\n// Import custom HTTP exception for error handling\nimport { HttpException } from \"@exceptions/HttpException\";\n// Import User interface for user data structure\nimport { User } from \"@interfaces/user.interface\";\n\n/**\n * Service class for user-related operations.\n * Handles CRUD operations for users, including password hashing and error handling.\n */\n@Service()\nexport class UserService {\n  /**\n   * Retrieves all users from the database.\n   * @returns Promise<User[]> - Array of user objects.\n   */\n  public async findAllUser(): Promise<User[]> {\n    const db = await getDB();\n    const allUser: User[] = await db.Users.findAll();\n    return allUser;\n  }\n\n  /**\n   * Finds a user by their primary key (ID).\n   * @param userId - The user's primary key.\n   * @returns Promise<User> - The user object.\n   * @throws HttpException if user doesn't exist.\n   */\n  public async findUserById(userId: number): Promise<User> {\n    const db = await getDB();\n    const findUser: User = await db.Users.findByPk(userId);\n    if (!findUser) throw new HttpException(false, 409, \"User doesn't exist\");\n    return findUser;\n  }\n\n  /**\n   * Finds a user by their UUID.\n   * @param user_uuid - The user's UUID.\n   * @returns Promise<User> - The user object.\n   * @throws HttpException if user doesn't exist.\n   */\n  public async findUserByUUID(user_uuid: string): Promise<User>{\n    const db = await getDB();\n    const findUser: User = await db.Users.findOne({ where: { uuid: user_uuid } });\n    if (!findUser) throw new HttpException(false, 409, \"User doesn't exist\");\n    return findUser;\n  }\n\n  /**\n   * Creates a new user with hashed password.\n   * @param userData - DTO containing user creation fields.\n   * @returns Promise<User> - The created user object.\n   * @throws HttpException if email already exists.\n   */\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    const db = await getDB();\n    const findUser: User = await db.Users.findOne({ where: { email: userData.email } });\n    if (findUser) throw new HttpException(false, 409, `This email ${userData.email} already exists`);\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await db.Users.create({ ...userData, password: hashedPassword });\n    return createUserData;\n  }\n\n  /**\n   * Updates an existing user by UUID, including password hashing.\n   * @param user_uuid - The user's UUID.\n   * @param userData - DTO containing user update fields.\n   * @returns Promise<User> - The updated user object.\n   * @throws HttpException if user doesn't exist.\n   */\n  public async updateUser(user_uuid: string, userData: CreateUserDto): Promise<User> {\n    const db = await getDB();\n    const findUser: User = await db.Users.findOne({ where: { uuid: user_uuid } });\n    if (!findUser) throw new HttpException(false, 409, \"User doesn't exist\");\n    const hashedPassword = await hash(userData.password, 10);\n    await db.Users.update({ ...userData, password: hashedPassword }, { where: { uuid: user_uuid } });\n    const updateUser: User = await db.Users.findOne({ where: { uuid: user_uuid } });\n    return updateUser;\n  }\n\n  /**\n   * Deletes a user by their UUID.\n   * @param user_uuid - The user's UUID.\n   * @returns Promise<User> - The deleted user object.\n   * @throws HttpException if user doesn't exist.\n   */\n  public async deleteUser(user_uuid: string): Promise<User> {\n    const db = await getDB();\n    const findUser: User = await db.Users.findOne({ where: { uuid: user_uuid } });\n    if (!findUser) throw new HttpException(false, 409, \"User doesn't exist\");\n    await db.Users.destroy({ where: { uuid: user_uuid } });\n    return findUser;\n  }\n}"],"names":["UserService","findAllUser","db","getDB","allUser","Users","findAll","findUserById","userId","findUser","findByPk","HttpException","findUserByUUID","user_uuid","findOne","where","uuid","createUser","userData","email","hashedPassword","hash","password","createUserData","create","updateUser","update","deleteUser","destroy"],"mappings":";;;;+BAkBaA;;;eAAAA;;;wBAjBQ;wBAEG;wBAEF;+BAIQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASvB,IAAA,AAAMA,cAAN,MAAMA;IAKX,MAAaC,cAA+B;QAC1C,MAAMC,KAAK,MAAMC,IAAAA,aAAK;QACtB,MAAMC,UAAkB,MAAMF,GAAGG,KAAK,CAACC,OAAO;QAC9C,OAAOF;IACT;IAQA,MAAaG,aAAaC,MAAc,EAAiB;QACvD,MAAMN,KAAK,MAAMC,IAAAA,aAAK;QACtB,MAAMM,WAAiB,MAAMP,GAAGG,KAAK,CAACK,QAAQ,CAACF;QAC/C,IAAI,CAACC,UAAU,MAAM,IAAIE,4BAAa,CAAC,OAAO,KAAK;QACnD,OAAOF;IACT;IAQA,MAAaG,eAAeC,SAAiB,EAAgB;QAC3D,MAAMX,KAAK,MAAMC,IAAAA,aAAK;QACtB,MAAMM,WAAiB,MAAMP,GAAGG,KAAK,CAACS,OAAO,CAAC;YAAEC,OAAO;gBAAEC,MAAMH;YAAU;QAAE;QAC3E,IAAI,CAACJ,UAAU,MAAM,IAAIE,4BAAa,CAAC,OAAO,KAAK;QACnD,OAAOF;IACT;IAQA,MAAaQ,WAAWC,QAAuB,EAAiB;QAC9D,MAAMhB,KAAK,MAAMC,IAAAA,aAAK;QACtB,MAAMM,WAAiB,MAAMP,GAAGG,KAAK,CAACS,OAAO,CAAC;YAAEC,OAAO;gBAAEI,OAAOD,SAASC,KAAK;YAAC;QAAE;QACjF,IAAIV,UAAU,MAAM,IAAIE,4BAAa,CAAC,OAAO,KAAK,CAAC,WAAW,EAAEO,SAASC,KAAK,CAAC,eAAe,CAAC;QAC/F,MAAMC,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAMrB,GAAGG,KAAK,CAACmB,MAAM,CAAC,wCAAKN;YAAUI,UAAUF;;QAC5E,OAAOG;IACT;IASA,MAAaE,WAAWZ,SAAiB,EAAEK,QAAuB,EAAiB;QACjF,MAAMhB,KAAK,MAAMC,IAAAA,aAAK;QACtB,MAAMM,WAAiB,MAAMP,GAAGG,KAAK,CAACS,OAAO,CAAC;YAAEC,OAAO;gBAAEC,MAAMH;YAAU;QAAE;QAC3E,IAAI,CAACJ,UAAU,MAAM,IAAIE,4BAAa,CAAC,OAAO,KAAK;QACnD,MAAMS,iBAAiB,MAAMC,IAAAA,YAAI,EAACH,SAASI,QAAQ,EAAE;QACrD,MAAMpB,GAAGG,KAAK,CAACqB,MAAM,CAAC,wCAAKR;YAAUI,UAAUF;YAAkB;YAAEL,OAAO;gBAAEC,MAAMH;YAAU;QAAE;QAC9F,MAAMY,aAAmB,MAAMvB,GAAGG,KAAK,CAACS,OAAO,CAAC;YAAEC,OAAO;gBAAEC,MAAMH;YAAU;QAAE;QAC7E,OAAOY;IACT;IAQA,MAAaE,WAAWd,SAAiB,EAAiB;QACxD,MAAMX,KAAK,MAAMC,IAAAA,aAAK;QACtB,MAAMM,WAAiB,MAAMP,GAAGG,KAAK,CAACS,OAAO,CAAC;YAAEC,OAAO;gBAAEC,MAAMH;YAAU;QAAE;QAC3E,IAAI,CAACJ,UAAU,MAAM,IAAIE,4BAAa,CAAC,OAAO,KAAK;QACnD,MAAMT,GAAGG,KAAK,CAACuB,OAAO,CAAC;YAAEb,OAAO;gBAAEC,MAAMH;YAAU;QAAE;QACpD,OAAOJ;IACT;AACF"}