{"version":3,"sources":["../../src/services/comments.service.ts"],"sourcesContent":["// Import function to get database instance lazily\nimport { getDB } from \"@/database/db-lazy\";\n// Import DTOs for creating and updating comments\nimport { CreateCommentDto, UpdateCommentDto } from \"@/dtos/comments.dto\";\n// Import custom HTTP exception for error handling\nimport { HttpException } from \"@exceptions/HttpException\";\n// Import interfaces for comment and parsed comment structure\nimport { Comment, CommentParsed } from \"@/interfaces/comment.interface\";\n// Import ArticleCommentModel for ORM operations on article comments\nimport { ArticleCommentModel } from \"@/models/articles_comments.model\";\n// Import Service decorator from typedi for dependency injection\nimport { Service } from \"typedi\";\n// Import Sequelize operators for advanced queries\nimport { Op } from \"sequelize\";\n\n/**\n * Service class for comment-related operations.\n * Handles CRUD, likes, replies, and parsing logic for comments.\n */\n@Service()\nexport class CommentService {\n  /**\n   * Parses an ArticleCommentModel instance into a CommentParsed object.\n   * @param comment - The ArticleCommentModel instance.\n   * @returns CommentParsed - The parsed comment object.\n   */\n  private commentParsed(comment: ArticleCommentModel): CommentParsed {\n    return {\n      uuid: comment.uuid,\n      comment: comment.comment,\n      article: {\n        uuid: comment.article.uuid,\n        title: comment.article.title\n      },\n      author: {\n        uuid: comment.author.uuid,\n        full_name: comment.author.full_name || null,\n        avatar: comment.author.avatar?.uuid || null, \n      },\n      likes: comment.likes || 0,\n      replies: comment.replies || 0\n    };\n  }\n\n  /**\n   * Retrieves all comments with their like and reply counts.\n   * @returns Promise<{comments: CommentParsed[]}> - Array of parsed comments.\n   */\n  public async getComments(): Promise<{comments: CommentParsed[]}> {\n    const DB = await getDB();\n    const comments = await DB.ArticlesComments.findAll({});\n\n    const repliesCountPromises = comments.map(comment => {\n      return DB.CommentsReplies.count({\n        where: { comment_id: comment.pk }\n      });\n    });\n\n\n    const repliesCount = await Promise.all(repliesCountPromises);\n\n    comments.forEach((comment, index) => {\n      comment.replies = repliesCount[index];\n    });\n\n    const likeCountPromises = comments.map(comment => {\n      return DB.ArticleCommentsLikes.count({\n        where: { comment_id: comment.pk }\n      });\n    });\n\n    const likesCount = await Promise.all(likeCountPromises);\n\n    comments.forEach((comment, index) => {\n      comment.likes = likesCount[index];\n    });\n\n    const transformedComments = comments.map(comment => this.commentParsed(comment));\n\n    return { comments: transformedComments };\n  }\n\n  /**\n   * Retrieves comments for a specific article by its UUID.\n   * @param article_id - The UUID of the article.\n   * @returns Promise<{comments: CommentParsed[]}> - Array of parsed comments.\n   * @throws HttpException if article or comments are not found.\n   */\n  public async getCommentsByArticle(article_id: string): Promise<{comments: CommentParsed[]}> {\n    const DB = await getDB();\n    const article = await DB.Articles.findOne({ where: { uuid: article_id }, attributes: [\"pk\"] });\n    if(!article) {\n      throw new HttpException(false, 404, \"Article is not found\");\n    }\n    const comments = await DB.ArticlesComments.findAll({ where: { article_id: article.pk } });\n    if(!comments) {\n      throw new HttpException(false, 404, \"Comment is not found\");\n    }\n    const repliesCountPromises = comments.map(comment => {\n      return DB.CommentsReplies.count({\n        where: { comment_id: comment.pk }\n      });\n    });\n\n\n    const repliesCount = await Promise.all(repliesCountPromises);\n\n    comments.forEach((comment, index) => {\n      comment.replies = repliesCount[index];\n    });\n\n    const likeCountPromises = comments.map(comment => {\n      return DB.ArticleCommentsLikes.count({\n        where: { comment_id: comment.pk }\n      });\n    });\n\n    const likesCount = await Promise.all(likeCountPromises);\n\n    comments.forEach((comment, index) => {\n      comment.likes = likesCount[index];\n    });\n\n    const transformedComments = comments.map(comment => this.commentParsed(comment));\n\n    return { comments: transformedComments };\n  }\n\n  /**\n   * Retrieves a single comment by its UUID.\n   * @param comment_id - The UUID of the comment.\n   * @returns Promise<CommentParsed> - The parsed comment object.\n   */\n  public async getCommentById(comment_id: string): Promise<CommentParsed> {\n    const DB = await getDB();\n    const comment = await DB.ArticlesComments.findOne({ where: { uuid: comment_id }});\n    const likesCount = await DB.ArticleCommentsLikes.count({\n      where: { comment_id: comment.pk }\n    });\n        \n    comment.likes = likesCount;\n\n    const repliesCount = await DB.CommentsReplies.count({\n      where: { comment_id: comment.pk }\n    });\n\n    comment.replies = repliesCount;\n\n    const response = this.commentParsed(comment);\n\n    return response;\n  }\n\n  /**\n   * Creates a new comment for an article and author.\n   * @param article_id - The UUID of the article.\n   * @param author_id - The author's user ID.\n   * @param data - DTO containing comment creation fields.\n   * @returns Promise<CommentParsed> - The created comment object.\n   */\n  public async createComment(article_id: string, author_id: number, data: CreateCommentDto): Promise<CommentParsed> {\n    const DB = await getDB();\n    const article = await DB.Articles.findOne({ where: { uuid: article_id }, attributes: [\"pk\"] });\n    const comment = await DB.ArticlesComments.create({ article_id: article.pk, author_id, ...data });\n    delete comment.dataValues.pk;\n\n    return this.getCommentById(comment.uuid);\n  }\n\n  /**\n   * Updates an existing comment by its UUID.\n   * @param comment_id - The UUID of the comment.\n   * @param data - DTO containing comment update fields.\n   * @returns Promise<CommentParsed> - The updated comment object.\n   * @throws HttpException if no fields are provided.\n   */\n  public async updateComment(comment_id: string, data: UpdateCommentDto): Promise<CommentParsed> {\n    const DB = await getDB();\n    const comment = await DB.ArticlesComments.findOne({ where: { uuid: comment_id }});\n    const updatedData: any = {};\n    \n    if (data.comment) updatedData.comment = data.comment;\n\n    if (Object.keys(updatedData).length === 0) {\n      throw new HttpException(false, 400, \"Some field is required\");\n    }\n\n    if (Object.keys(updatedData).length > 0) {\n      await DB.ArticlesComments.update(updatedData, {\n        where: { uuid: comment_id },\n        returning: true,\n      });\n    }\n\n    return this.getCommentById(comment_id);\n  }\n\n  /**\n   * Deletes a comment and all its related replies and likes.\n   * @param comment_id - The UUID of the comment.\n   * @returns Promise<boolean> - True if deletion is successful.\n   * @throws HttpException if comment is not found.\n   */\n  public async deleteComment(comment_id: string): Promise<boolean> {\n    const DB = await getDB();\n    const comment = await DB.ArticlesComments.findOne({ where: { uuid: comment_id }});\n\n    if(!comment) {\n      throw new HttpException(false, 400, \"Comment is not found\");\n    }\n\n    const replies = await DB.CommentsReplies.findAll({ attributes: [\"pk\"], where: { comment_id: comment.pk} });\n    const replyIds = replies.map(reply => reply.pk);\n\n    const transaction = await DB.sequelize.transaction();\n    try {\n      await comment.destroy({ transaction });\n\n      await Promise.all([\n        DB.ArticleCommentsLikes.destroy({ where: { comment_id: comment.pk}, transaction }),\n        DB.CommentsReplies.destroy({ where: { comment_id: comment.pk }, transaction }),\n        DB.CommentsRepliesLikes.destroy({ where: { reply_id: { [Op.in]: replyIds } }, transaction }),\n      ]);\n      \n      await transaction.commit();\n\n      return true;\n    } catch (error) {\n      await transaction.rollback();\n      throw error; \n    }\n  }\n\n  /**\n   * Likes or unlikes a comment for a user.\n   * @param comment_id - The UUID of the comment.\n   * @param user_id - The user's ID.\n   * @returns Promise<object> - Like status and count.\n   * @throws HttpException if comment is not found.\n   */\n  public async likeComment(comment_id: string, user_id: number): Promise<object> {\n    const DB = await getDB();\n    const comment = await DB.ArticlesComments.findOne({ where: { uuid: comment_id }});\n\n    if(!comment) {\n      throw new HttpException(false, 400, \"Comment is not found\");\n    }\n\n    const transaction = await DB.sequelize.transaction();\n    try {\n      const [commentLike, commentLikesCount] = await Promise.all([\n        DB.ArticleCommentsLikes.findOne({ where: { comment_id: comment.pk, user_id }, transaction }),\n        DB.ArticleCommentsLikes.count({ where: { comment_id: comment.pk, user_id }, transaction })\n      ]);\n\n      if (!commentLike) {\n        await DB.ArticleCommentsLikes.create({ comment_id: comment.pk, user_id }, { transaction });\n        await transaction.commit();\n        return { comment_id, is_liked: true, likes: commentLikesCount + 1 }; \n      } else {\n        await DB.ArticleCommentsLikes.destroy({ where: { comment_id: comment.pk, user_id }, force: true, transaction });\n        await transaction.commit();\n        return { comment_id, is_liked: false, likes: commentLikesCount - 1 }; \n      }\n    }catch(error) {\n      await transaction.rollback();\n      throw error;\n    }\n  }\n}\n"],"names":["CommentService","commentParsed","comment","uuid","article","title","author","full_name","avatar","likes","replies","getComments","DB","getDB","comments","ArticlesComments","findAll","repliesCountPromises","map","CommentsReplies","count","where","comment_id","pk","repliesCount","Promise","all","forEach","index","likeCountPromises","ArticleCommentsLikes","likesCount","transformedComments","getCommentsByArticle","article_id","Articles","findOne","attributes","HttpException","getCommentById","response","createComment","author_id","data","create","dataValues","updateComment","updatedData","Object","keys","length","update","returning","deleteComment","replyIds","reply","transaction","sequelize","destroy","CommentsRepliesLikes","reply_id","Op","in","commit","error","rollback","likeComment","user_id","commentLike","commentLikesCount","is_liked","force"],"mappings":"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"}