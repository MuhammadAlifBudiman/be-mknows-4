{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import { existsSync, mkdirSync } from \"fs\";\nimport { join } from \"path\";\nimport winston from \"winston\";\nimport winstonDaily from \"winston-daily-rotate-file\";\nimport { LOG_DIR } from \"@config/index\";\n\n// logs dir\nconst logDir: string = join(__dirname, LOG_DIR);\n\n// Detect if running on Vercel (read-only fs)\nconst isVercel = !!process.env.VERCEL;\n\nif (!isVercel && !existsSync(logDir)) {\n  mkdirSync(logDir);\n}\n\n// Define log format\nconst logFormat = winston.format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`);\n\n/*\n * Log Level\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\n */\n// Use winston.transport[] for correct typing\nconst transports: winston.transport[] = [\n  new winston.transports.Console({\n    format: winston.format.combine(winston.format.splat(), winston.format.colorize()),\n  }),\n];\n\nif (!isVercel) {\n  transports.push(\n    // debug log setting\n    new winstonDaily({\n      level: \"debug\",\n      datePattern: \"YYYY-MM-DD\",\n      dirname: logDir + \"/debug\", // log file /logs/debug/*.log in save\n      filename: \"%DATE%.log\",\n      maxFiles: 30, // 30 Days saved\n      json: false,\n      zippedArchive: true,\n    }),\n    // error log setting\n    new winstonDaily({\n      level: \"error\",\n      datePattern: \"YYYY-MM-DD\",\n      dirname: logDir + \"/error\", // log file /logs/error/*.log in save\n      filename: \"%DATE%.log\",\n      maxFiles: 30, // 30 Days saved\n      handleExceptions: true,\n      json: false,\n      zippedArchive: true,\n    }),\n  );\n}\n\nconst logger = winston.createLogger({\n  format: winston.format.combine(\n    winston.format.timestamp({\n      format: \"YYYY-MM-DD HH:mm:ss\",\n    }),\n    logFormat,\n  ),\n  transports,\n});\n\nconst stream = {\n  write: (message: string) => {\n    logger.info(message.substring(0, message.lastIndexOf(\"\\n\")));\n  },\n};\n\nexport { logger, stream };"],"names":["logger","stream","logDir","join","__dirname","LOG_DIR","isVercel","process","env","VERCEL","existsSync","mkdirSync","logFormat","winston","format","printf","timestamp","level","message","transports","Console","combine","splat","colorize","push","winstonDaily","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","createLogger","write","info","substring","lastIndexOf"],"mappings":";;;;;;;;;;;QAwESA;eAAAA;;QAAQC;eAAAA;;;oBAxEqB;sBACjB;gEACD;+EACK;uBACD;;;;;;AAGxB,MAAMC,SAAiBC,IAAAA,UAAI,EAACC,WAAWC,cAAO;AAG9C,MAAMC,WAAW,CAAC,CAACC,QAAQC,GAAG,CAACC,MAAM;AAErC,IAAI,CAACH,YAAY,CAACI,IAAAA,cAAU,EAACR,SAAS;IACpCS,IAAAA,aAAS,EAACT;AACZ;AAGA,MAAMU,YAAYC,gBAAO,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAE,GAAK,GAAGF,UAAU,CAAC,EAAEC,MAAM,EAAE,EAAEC,SAAS;AAO9G,MAAMC,aAAkC;IACtC,IAAIN,gBAAO,CAACM,UAAU,CAACC,OAAO,CAAC;QAC7BN,QAAQD,gBAAO,CAACC,MAAM,CAACO,OAAO,CAACR,gBAAO,CAACC,MAAM,CAACQ,KAAK,IAAIT,gBAAO,CAACC,MAAM,CAACS,QAAQ;IAChF;CACD;AAED,IAAI,CAACjB,UAAU;IACba,WAAWK,IAAI,CAEb,IAAIC,+BAAY,CAAC;QACfR,OAAO;QACPS,aAAa;QACbC,SAASzB,SAAS;QAClB0B,UAAU;QACVC,UAAU;QACVC,MAAM;QACNC,eAAe;IACjB,IAEA,IAAIN,+BAAY,CAAC;QACfR,OAAO;QACPS,aAAa;QACbC,SAASzB,SAAS;QAClB0B,UAAU;QACVC,UAAU;QACVG,kBAAkB;QAClBF,MAAM;QACNC,eAAe;IACjB;AAEJ;AAEA,MAAM/B,SAASa,gBAAO,CAACoB,YAAY,CAAC;IAClCnB,QAAQD,gBAAO,CAACC,MAAM,CAACO,OAAO,CAC5BR,gBAAO,CAACC,MAAM,CAACE,SAAS,CAAC;QACvBF,QAAQ;IACV,IACAF;IAEFO;AACF;AAEA,MAAMlB,SAAS;IACbiC,OAAO,CAAChB;QACNlB,OAAOmC,IAAI,CAACjB,QAAQkB,SAAS,CAAC,GAAGlB,QAAQmB,WAAW,CAAC;IACvD;AACF"}