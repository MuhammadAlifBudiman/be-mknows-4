{"version":3,"sources":["../../src/config/node-mailer.js"],"sourcesContent":["/**\n * NodeMailer configuration and email sending utility\n * Uses Gmail SMTP with credentials from environment variables\n */\nimport { createTransport } from \"nodemailer\"; // Import NodeMailer transport creator\nimport { apiResponse } from \"@utils/apiResponse\"; // Import custom API response utility\nimport {\n  GOOGLE_EMAIL, GOOGLE_APP_PASSWORD,\n} from \"@config/index\"; // Import Google email credentials from config\n\n/**\n * Sends an email using Gmail SMTP\n * @param {string} to - Recipient email address\n * @param {string} subject - Email subject\n * @param {string} templates - HTML content for the email body\n * @returns {Promise<void>} Returns nothing, but logs and responds on error\n */\nexport const sendEmail = async (to, subject, templates) => {\n  try {\n    // Create a transporter object using Gmail service and credentials\n    const transporter = createTransport({\n      service: \"gmail\",\n      auth: {\n        user: GOOGLE_EMAIL,\n        pass: GOOGLE_APP_PASSWORD,\n      },\n      // host: \"smtp.gmail.com\",\n      // port: 587,\n      // secure: false, // true for 465, false for other ports\n    });\n\n    // Define mail options including sender, recipient, subject, and HTML body\n    const mailOptions = {\n      from: \"Bootcamp <no-reply@m-knowsconsulting.com>\",\n      replyTo: \"no-reply@m-knowsconsulting.com\",\n      to,\n      subject: `Bootcamp - ${subject}`,\n      html: templates,\n    };\n\n    // Send the email and handle callback for success or error\n    transporter.sendMail(mailOptions, (err, info) => {\n      if (err) {\n        console.error(`Error Transporter: ${err.message}`);\n        return apiResponse(400, \"INTERNAL SERVER ERROR\", err.message);\n      }\n      // Log success info\n      console.info(`Successfully sent email to ${to} with subject - ${mailOptions.subject}`);\n      console.info(`Email sent: ${info.response}`);\n    });\n  } catch (error) {\n    // Handle unexpected errors\n    throw apiResponse(status.INTERNAL_SERVER_ERROR, \"INTERNAL_SERVER_ERROR\", error.message);\n  }\n};"],"names":["sendEmail","to","subject","templates","transporter","createTransport","service","auth","user","GOOGLE_EMAIL","pass","GOOGLE_APP_PASSWORD","mailOptions","from","replyTo","html","sendMail","err","info","console","error","message","apiResponse","response","status","INTERNAL_SERVER_ERROR"],"mappings":";;;;+BAiBaA;;;eAAAA;;;4BAbmB;6BACJ;uBAGrB;AASA,MAAMA,YAAY,OAAOC,IAAIC,SAASC;IAC3C,IAAI;QAEF,MAAMC,cAAcC,IAAAA,2BAAe,EAAC;YAClCC,SAAS;YACTC,MAAM;gBACJC,MAAMC,mBAAY;gBAClBC,MAAMC,0BAAmB;YAC3B;QAIF;QAGA,MAAMC,cAAc;YAClBC,MAAM;YACNC,SAAS;YACTb;YACAC,SAAS,CAAC,WAAW,EAAEA,SAAS;YAChCa,MAAMZ;QACR;QAGAC,YAAYY,QAAQ,CAACJ,aAAa,CAACK,KAAKC;YACtC,IAAID,KAAK;gBACPE,QAAQC,KAAK,CAAC,CAAC,mBAAmB,EAAEH,IAAII,OAAO,EAAE;gBACjD,OAAOC,IAAAA,wBAAW,EAAC,KAAK,yBAAyBL,IAAII,OAAO;YAC9D;YAEAF,QAAQD,IAAI,CAAC,CAAC,2BAA2B,EAAEjB,GAAG,gBAAgB,EAAEW,YAAYV,OAAO,EAAE;YACrFiB,QAAQD,IAAI,CAAC,CAAC,YAAY,EAAEA,KAAKK,QAAQ,EAAE;QAC7C;IACF,EAAE,OAAOH,OAAO;QAEd,MAAME,IAAAA,wBAAW,EAACE,OAAOC,qBAAqB,EAAE,yBAAyBL,MAAMC,OAAO;IACxF;AACF"}