{"version":3,"sources":["../../src/controllers/user.controller.ts"],"sourcesContent":["/**\n * UserController handles user-related operations such as retrieving user data and user agent information.\n * Uses UserService for business logic and apiResponse for standardized responses.\n */\nimport { NextFunction, Request, Response } from \"express\"; // Express types for request handling\nimport { Container } from \"typedi\"; // Dependency injection container\nimport asyncHandler from \"express-async-handler\"; // Async error handler middleware\n\nimport { User } from \"@interfaces/user.interface\"; // User interface\nimport { UserService } from \"@services/users.service\"; // Service for user logic\nimport { apiResponse } from \"@/utils/apiResponse\"; // Standardized API response\nimport { getUserAgent } from \"@utils/userAgent\"; // Utility to parse user agent\nimport { UserAgent } from \"@interfaces/common/useragent.interface\"; // User agent interface\n// import { CreateUserDto } from \"@dtos/users.dto\";\n\n/**\n * Main controller class for user endpoints\n */\nexport class UserController {\n  /**\n   * UserService instance for user operations\n   */\n  public user = Container.get(UserService);\n\n  /**\n   * Get user agent information from the request\n   * @param req - Express request\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public getUseragent = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userAgentPayload: UserAgent = getUserAgent(req);\n    res.status(200).json(apiResponse(200, \"OK\", \"User Agent Retrieved\", userAgentPayload));\n  });\n\n  /**\n   * Get all users\n   * @param req - Express request\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public getUsers = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const findAllUsersData: User[] = await this.user.findAllUser();\n\n    res.status(200).json(apiResponse(200, \"OK\", \"All Users Retrieved\", findAllUsersData));\n  });\n\n  /**\n   * Get a user by UUID\n   * @param req - Express request containing user UUID\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public getUserByUUID = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const user_uuid = req.params.uuid;\n    const findOneUserData: User = await this.user.findUserByUUID(user_uuid);\n\n    res.status(200).json(apiResponse(200, \"OK\", \"User Retrieved\", findOneUserData));\n  });\n\n\n}"],"names":["UserController","user","Container","get","UserService","getUseragent","asyncHandler","req","res","next","userAgentPayload","getUserAgent","status","json","apiResponse","getUsers","findAllUsersData","findAllUser","getUserByUUID","user_uuid","params","uuid","findOneUserData","findUserByUUID"],"mappings":";;;;+BAkBaA;;;eAAAA;;;wBAba;4EACD;8BAGG;6BACA;2BACC;;;;;;;;;;;;;;;;;;;AAOtB,IAAA,AAAMA,iBAAN,MAAMA;;QAIX,uBAAOC,QAAOC,iBAAS,CAACC,GAAG,CAACC,yBAAW;QAQvC,uBAAOC,gBAAeC,IAAAA,4BAAY,EAAC,OAAOC,KAAcC,KAAeC;YACrE,MAAMC,mBAA8BC,IAAAA,uBAAY,EAACJ;YACjDC,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,wBAAwBJ;QACtE;QAQA,uBAAOK,YAAWT,IAAAA,4BAAY,EAAC,OAAOC,KAAcC,KAAeC;YACjE,MAAMO,mBAA2B,MAAM,IAAI,CAACf,IAAI,CAACgB,WAAW;YAE5DT,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,uBAAuBE;QACrE;QAQA,uBAAOE,iBAAgBZ,IAAAA,4BAAY,EAAC,OAAOC,KAAcC,KAAeC;YACtE,MAAMU,YAAYZ,IAAIa,MAAM,CAACC,IAAI;YACjC,MAAMC,kBAAwB,MAAM,IAAI,CAACrB,IAAI,CAACsB,cAAc,CAACJ;YAE7DX,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,kBAAkBQ;QAChE;;AAGF"}