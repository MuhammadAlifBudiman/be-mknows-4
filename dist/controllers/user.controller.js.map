{"version":3,"sources":["../../src/controllers/user.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { Container } from \"typedi\";\nimport asyncHandler from \"express-async-handler\";\n\nimport { User } from \"@interfaces/user.interface\";\nimport { UserService } from \"@services/users.service\";\nimport { apiResponse } from \"@/utils/apiResponse\";\nimport { getUserAgent } from \"@utils/userAgent\";\nimport { UserAgent } from \"@/interfaces/common/useragent.interface\";\n// import { CreateUserDto } from \"@dtos/users.dto\";\n\nexport class UserController {\n  public user = Container.get(UserService);\n\n  public getUseragent = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userAgentPayload: UserAgent = getUserAgent(req);\n    res.status(200).json(apiResponse(200, \"OK\", \"All Users Retrieved\", userAgentPayload));\n  });\n\n  public getUsers = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const findAllUsersData: User[] = await this.user.findAllUser();\n\n    res.status(200).json(apiResponse(200, \"OK\", \"All Users Retrieved\", findAllUsersData));\n  });\n\n  public getUserById = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const userId = Number(req.params.id);\n    const findOneUserData: User = await this.user.findUserById(userId);\n\n    res.status(200).json({ data: findOneUserData, message: \"findOne\" });\n  });\n\n  // public createUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  //   const userData: CreateUserDto = req.body;\n  //   const createUserData: User = await this.user.createUser(userData);\n\n  //   res.status(201).json({ data: createUserData, message: \"created\" });\n  // });\n\n  // public updateUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  //   try {\n  //     const userId = Number(req.params.id);\n  //     const userData: CreateUserDto = req.body;\n  //     const updateUserData: User = await this.user.updateUser(userId, userData);\n\n  //     res.status(200).json({ data: updateUserData, message: \"updated\" });\n  //   } catch (error) {\n  //     next(error);\n  //   }\n  // });\n\n  // public deleteUser = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n  //   try {\n  //     const userId = Number(req.params.id);\n  //     const deleteUserData: User = await this.user.deleteUser(userId);\n\n  //     res.status(200).json({ data: deleteUserData, message: \"deleted\" });\n  //   } catch (error) {\n  //     next(error);\n  //   }\n  // });\n}"],"names":["UserController","user","Container","get","UserService","getUseragent","asyncHandler","req","res","next","userAgentPayload","getUserAgent","status","json","apiResponse","getUsers","findAllUsersData","findAllUser","getUserById","userId","Number","params","id","findOneUserData","findUserById","data","message"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAVa;4EACD;8BAGG;6BACA;2BACC;;;;;;;;;;;;;;;;;;;AAItB,IAAA,AAAMA,iBAAN,MAAMA;;QACX,uBAAOC,QAAOC,iBAAS,CAACC,GAAG,CAACC,yBAAW;QAEvC,uBAAOC,gBAAeC,IAAAA,4BAAY,EAAC,OAAOC,KAAcC,KAAeC;YACrE,MAAMC,mBAA8BC,IAAAA,uBAAY,EAACJ;YACjDC,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,uBAAuBJ;QACrE;QAEA,uBAAOK,YAAWT,IAAAA,4BAAY,EAAC,OAAOC,KAAcC,KAAeC;YACjE,MAAMO,mBAA2B,MAAM,IAAI,CAACf,IAAI,CAACgB,WAAW;YAE5DT,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,uBAAuBE;QACrE;QAEA,uBAAOE,eAAcZ,IAAAA,4BAAY,EAAC,OAAOC,KAAcC,KAAeC;YACpE,MAAMU,SAASC,OAAOb,IAAIc,MAAM,CAACC,EAAE;YACnC,MAAMC,kBAAwB,MAAM,IAAI,CAACtB,IAAI,CAACuB,YAAY,CAACL;YAE3DX,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEY,MAAMF;gBAAiBG,SAAS;YAAU;QACnE;;AA+BF"}