{"version":3,"sources":["../../src/controllers/file.controller.ts"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport { Request, Response, NextFunction } from \"express\";\nimport asyncHandler from \"express-async-handler\";\nimport { Container } from \"typedi\";\n\nimport { FileService } from \"@services/files.service\";\nimport { RequestWithUser } from \"@interfaces/authentication/token.interface\";\n\nimport { apiResponse } from \"@utils/apiResponse\";\nimport { HttpException } from \"@/exceptions/HttpException\";\n\nexport class FileController {\n  private file = Container.get(FileService);\n\n  public uploadFile = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const image = req.file as Express.Multer.File;\n    const user_id = req.user.pk as number;\n\n    if(!image) throw new HttpException(false, 400, \"File is required\");\n\n    const response = await this.file.uploadSingleFile(user_id, image);\n    res.status(201).json(apiResponse(201, \"OK\", \"Upload Success\", response));\n  });\n\n  public getFileWithUUID = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const { file_id } = req.params;\n\n    const file = await this.file.getFileWithUUID(file_id);\n    const filepath = path.join(process.cwd(), `./uploads/${file.name}`);\n\n    if (!file || !fs.existsSync(filepath)) {\n      throw new HttpException(false, 400, \"File is not found\");\n    }\n\n    res.sendFile(filepath);\n  });\n\n  public getFileMine = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const user_id = req.user.pk as number;\n    const response = await this.file.getUserFiles(user_id);\n\n    res.status(200).json(apiResponse(200, \"OK\", \"Get Files Success\", response));\n  });\n}"],"names":["FileController","file","Container","get","FileService","uploadFile","asyncHandler","req","res","next","image","user_id","user","pk","HttpException","response","uploadSingleFile","status","json","apiResponse","getFileWithUUID","file_id","params","filepath","path","join","process","cwd","name","fs","existsSync","sendFile","getFileMine","getUserFiles"],"mappings":";;;;+BAYaA;;;eAAAA;;;2DAZE;6DACE;4EAEQ;wBACC;8BAEE;6BAGA;+BACE;;;;;;;;;;;;;;;;;;;AAEvB,IAAA,AAAMA,iBAAN,MAAMA;;QACX,uBAAQC,QAAOC,iBAAS,CAACC,GAAG,CAACC,yBAAW;QAExC,uBAAOC,cAAaC,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC3E,MAAMC,QAAQH,IAAIN,IAAI;YACtB,MAAMU,UAAUJ,IAAIK,IAAI,CAACC,EAAE;YAE3B,IAAG,CAACH,OAAO,MAAM,IAAII,4BAAa,CAAC,OAAO,KAAK;YAE/C,MAAMC,WAAW,MAAM,IAAI,CAACd,IAAI,CAACe,gBAAgB,CAACL,SAASD;YAC3DF,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,kBAAkBJ;QAChE;QAEA,uBAAOK,mBAAkBd,IAAAA,4BAAY,EAAC,OAAOC,KAAcC,KAAeC;YACxE,MAAM,EAAEY,OAAO,EAAE,GAAGd,IAAIe,MAAM;YAE9B,MAAMrB,OAAO,MAAM,IAAI,CAACA,IAAI,CAACmB,eAAe,CAACC;YAC7C,MAAME,WAAWC,aAAI,CAACC,IAAI,CAACC,QAAQC,GAAG,IAAI,CAAC,UAAU,EAAE1B,KAAK2B,IAAI,EAAE;YAElE,IAAI,CAAC3B,QAAQ,CAAC4B,WAAE,CAACC,UAAU,CAACP,WAAW;gBACrC,MAAM,IAAIT,4BAAa,CAAC,OAAO,KAAK;YACtC;YAEAN,IAAIuB,QAAQ,CAACR;QACf;QAEA,uBAAOS,eAAc1B,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC5E,MAAME,UAAUJ,IAAIK,IAAI,CAACC,EAAE;YAC3B,MAAME,WAAW,MAAM,IAAI,CAACd,IAAI,CAACgC,YAAY,CAACtB;YAE9CH,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,qBAAqBJ;QACnE;;AACF"}