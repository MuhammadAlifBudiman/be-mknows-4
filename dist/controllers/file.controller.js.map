{"version":3,"sources":["../../src/controllers/file.controller.ts"],"sourcesContent":["/**\n * FileController handles file upload and retrieval operations.\n * Uses FileService for business logic and apiResponse for standardized responses.\n */\nimport fs from \"fs\"; // Node.js file system module\nimport path from \"path\"; // Node.js path module\nimport { Request, Response, NextFunction } from \"express\"; // Express types for request handling\nimport asyncHandler from \"express-async-handler\"; // Async error handler middleware\nimport { Container } from \"typedi\"; // Dependency injection container\n\nimport { FileService } from \"@services/files.service\"; // Service for file logic\nimport { RequestWithUser } from \"@interfaces/authentication/token.interface\"; // Authenticated request interface\n\nimport { apiResponse } from \"@utils/apiResponse\"; // Standardized API response\nimport { HttpException } from \"@/exceptions/HttpException\"; // Custom HTTP exception\n\nimport { NODE_ENV } from \"@config/index\"; // Environment variable\n\n/**\n * Main controller class for file endpoints\n */\nexport class FileController {\n  /**\n   * FileService instance for file operations\n   */\n  private file = Container.get(FileService);\n\n  /**\n   * Upload a single file for the authenticated user\n   * @param req - Express request containing file and user info\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public uploadFile = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const image = req.file as Express.Multer.File;\n    const user_id = req.user.pk as number;\n\n    if(!image) throw new HttpException(false, 400, \"File is required\");\n\n    const response = await this.file.uploadSingleFile(user_id, image);\n    res.status(201).json(apiResponse(201, \"OK\", \"Upload Success\", response));\n  });\n\n  /**\n   * Retrieve a file by its UUID\n   * @param req - Express request containing file ID\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public getFileWithUUID = asyncHandler(async (req: Request, res: Response, next: NextFunction) => {\n    const { file_id } = req.params;\n    const file = await this.file.getFileWithUUID(file_id);\n    if (!file || !file.url) {\n      throw new HttpException(false, 400, \"File is not found\");\n    }\n    if (NODE_ENV === 'production') {\n      res.redirect(file.url); // Redirect to file URL in production\n    } else {\n      // Local: send file from uploads directory\n      const filepath = path.join(process.cwd(), `./uploads/${file.name}`);\n      res.sendFile(filepath);\n    }\n  });\n\n  /**\n   * Get all files uploaded by the authenticated user\n   * @param req - Express request containing user info\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public getFileMine = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const user_id = req.user.pk as number;\n    const response = await this.file.getUserFiles(user_id);\n\n    res.status(200).json(apiResponse(200, \"OK\", \"Get Files Success\", response));\n  });\n}"],"names":["FileController","file","Container","get","FileService","uploadFile","asyncHandler","req","res","next","image","user_id","user","pk","HttpException","response","uploadSingleFile","status","json","apiResponse","getFileWithUUID","file_id","params","url","NODE_ENV","redirect","filepath","path","join","process","cwd","name","sendFile","getFileMine","getUserFiles"],"mappings":";;;;+BAqBaA;;;eAAAA;;;6DAhBI;4EAEQ;wBACC;8BAEE;6BAGA;+BACE;uBAEL;;;;;;;;;;;;;;;;;;;AAKlB,IAAA,AAAMA,iBAAN,MAAMA;;QAIX,uBAAQC,QAAOC,iBAAS,CAACC,GAAG,CAACC,yBAAW;QAQxC,uBAAOC,cAAaC,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC3E,MAAMC,QAAQH,IAAIN,IAAI;YACtB,MAAMU,UAAUJ,IAAIK,IAAI,CAACC,EAAE;YAE3B,IAAG,CAACH,OAAO,MAAM,IAAII,4BAAa,CAAC,OAAO,KAAK;YAE/C,MAAMC,WAAW,MAAM,IAAI,CAACd,IAAI,CAACe,gBAAgB,CAACL,SAASD;YAC3DF,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,kBAAkBJ;QAChE;QAQA,uBAAOK,mBAAkBd,IAAAA,4BAAY,EAAC,OAAOC,KAAcC,KAAeC;YACxE,MAAM,EAAEY,OAAO,EAAE,GAAGd,IAAIe,MAAM;YAC9B,MAAMrB,OAAO,MAAM,IAAI,CAACA,IAAI,CAACmB,eAAe,CAACC;YAC7C,IAAI,CAACpB,QAAQ,CAACA,KAAKsB,GAAG,EAAE;gBACtB,MAAM,IAAIT,4BAAa,CAAC,OAAO,KAAK;YACtC;YACA,IAAIU,eAAQ,KAAK,cAAc;gBAC7BhB,IAAIiB,QAAQ,CAACxB,KAAKsB,GAAG;YACvB,OAAO;gBAEL,MAAMG,WAAWC,aAAI,CAACC,IAAI,CAACC,QAAQC,GAAG,IAAI,CAAC,UAAU,EAAE7B,KAAK8B,IAAI,EAAE;gBAClEvB,IAAIwB,QAAQ,CAACN;YACf;QACF;QAQA,uBAAOO,eAAc3B,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC5E,MAAME,UAAUJ,IAAIK,IAAI,CAACC,EAAE;YAC3B,MAAME,WAAW,MAAM,IAAI,CAACd,IAAI,CAACiC,YAAY,CAACvB;YAE9CH,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,qBAAqBJ;QACnE;;AACF"}