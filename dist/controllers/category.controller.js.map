{"version":3,"sources":["../../src/controllers/category.controller.ts"],"sourcesContent":["/**\n * CategoryController handles CRUD operations for categories.\n * Uses CategoryService for business logic and apiResponse for standardized responses.\n */\nimport { Response, NextFunction } from \"express\"; // Express types for request handling\nimport asyncHandler from \"express-async-handler\"; // Async error handler middleware\nimport { Container } from \"typedi\"; // Dependency injection container\n\nimport { RequestWithUser } from \"@interfaces/authentication/token.interface\"; // Authenticated request interface\n\nimport { CategoryService } from \"@services/categories.service\"; // Service for category logic\nimport { Category } from \"@interfaces/category.interface\"; // Category interface\n\nimport { CreateCategoryDto, UpdateCategoryDto } from \"@dtos/categories.dto\"; // DTOs for category creation and update\nimport { apiResponse } from \"@utils/apiResponse\"; // Standardized API response\n\n/**\n * Main controller class for category endpoints\n */\nexport class CategoryController {\n  /**\n   * CategoryService instance for category operations\n   */\n  private category = Container.get(CategoryService);\n\n  /**\n   * Get all categories\n   * @param req - Express request\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public getCategories = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const response: Category[] = await this.category.getCategories();\n    res.status(200).json(apiResponse(200, \"OK\", \"Get Category Success\", response));\n  });\n\n  /**\n   * Create a new category\n   * @param req - Express request containing category data\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public createCategory = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const data: CreateCategoryDto = req.body;\n    const response: Category = await this.category.createCategory(data);\n    res.status(201).json(apiResponse(201, \"OK\", \"Create Category Success\", response));\n  });\n\n  /**\n   * Update an existing category by ID\n   * @param req - Express request containing category ID and update data\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public updateCategory = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const { category_id } = req.params;\n    const data: UpdateCategoryDto = req.body;\n    const response: Category = await this.category.updateCategory(category_id, data);\n    res.status(200).json(apiResponse(200, \"OK\", \"Update Category Success\", response));\n  });\n\n  /**\n   * Delete a category by ID\n   * @param req - Express request containing category ID\n   * @param res - Express response\n   * @param next - Express next middleware\n   */\n  public deleteCategory = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const { category_id } = req.params;\n    await this.category.deleteCategory(category_id);\n    res.status(200).json(apiResponse(200, \"OK\", \"Delete Category Success\", {}));\n  });\n}"],"names":["CategoryController","category","Container","get","CategoryService","getCategories","asyncHandler","req","res","next","response","status","json","apiResponse","createCategory","data","body","updateCategory","category_id","params","deleteCategory"],"mappings":";;;;+BAmBaA;;;eAAAA;;;4EAdY;wBACC;mCAIM;6BAIJ;;;;;;;;;;;;;;;;;;;AAKrB,IAAA,AAAMA,qBAAN,MAAMA;;QAIX,uBAAQC,YAAWC,iBAAS,CAACC,GAAG,CAACC,kCAAe;QAQhD,uBAAOC,iBAAgBC,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC9E,MAAMC,WAAuB,MAAM,IAAI,CAACT,QAAQ,CAACI,aAAa;YAC9DG,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,wBAAwBH;QACtE;QAQA,uBAAOI,kBAAiBR,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC/E,MAAMM,OAA0BR,IAAIS,IAAI;YACxC,MAAMN,WAAqB,MAAM,IAAI,CAACT,QAAQ,CAACa,cAAc,CAACC;YAC9DP,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,2BAA2BH;QACzE;QAQA,uBAAOO,kBAAiBX,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC/E,MAAM,EAAES,WAAW,EAAE,GAAGX,IAAIY,MAAM;YAClC,MAAMJ,OAA0BR,IAAIS,IAAI;YACxC,MAAMN,WAAqB,MAAM,IAAI,CAACT,QAAQ,CAACgB,cAAc,CAACC,aAAaH;YAC3EP,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,2BAA2BH;QACzE;QAQA,uBAAOU,kBAAiBd,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC/E,MAAM,EAAES,WAAW,EAAE,GAAGX,IAAIY,MAAM;YAClC,MAAM,IAAI,CAAClB,QAAQ,CAACmB,cAAc,CAACF;YACnCV,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,2BAA2B,CAAC;QAC1E;;AACF"}