{"version":3,"sources":["../../src/controllers/comment.controller.ts"],"sourcesContent":["/**\n * CommentController handles CRUD operations for comments and comment interactions.\n * Uses CommentService for business logic and apiResponse for standardized responses.\n */\nimport { Response, NextFunction } from \"express\"; // Express types for request handling\nimport { RequestWithUser } from \"@/interfaces/authentication/token.interface\"; // Authenticated request interface\nimport { CommentService } from \"@/services/comments.service\"; // Service for comment logic\nimport { apiResponse } from \"@/utils/apiResponse\"; // Standardized API response\nimport {Container} from \"typedi\"; // Dependency injection container\nimport asyncHandler from \"express-async-handler\"; // Async error handler middleware\nimport { Comment, CommentParsed } from \"@/interfaces/comment.interface\"; // Comment interfaces\n\n/**\n * Main controller class for comment endpoints\n */\nexport class CommentController{\n    /**\n     * CommentService instance for comment operations\n     */\n    private comment = Container.get(CommentService);\n\n    /**\n     * Get all comments\n     * @param req - Express request\n     * @param res - Express response\n     * @param next - Express next middleware\n     */\n    public getComments = asyncHandler( async (req: RequestWithUser, res: Response, next: NextFunction) => {\n        const response = await this.comment.getComments();\n        res.status(200).json(apiResponse(200, \"OK\", \"Get Comment Success\", response.comments));\n    });\n\n    /**\n     * Get comments for a specific article\n     * @param req - Express request containing article ID\n     * @param res - Express response\n     * @param next - Express next middleware\n     */\n    public getCommentsByArticle = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n        const { article_id } = req.params;\n        const response = await this.comment.getCommentsByArticle(article_id);\n        res.status(200).json(apiResponse(200, \"OK\", \"Get Comment Success\", response.comments));\n    });\n\n    /**\n     * Create a new comment for an article\n     * @param req - Express request containing article ID and comment data\n     * @param res - Express response\n     * @param next - Express next middleware\n     */\n    public createComment = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n        const { article_id } = req.params;\n        const author_id = req.user.pk;\n        const data = req.body;\n        const response = await this.comment.createComment(article_id, author_id, data);\n        res.status(201).json(apiResponse(200, \"OK\", \"Create Comment Success\", response));\n    });\n\n    /**\n     * Update an existing comment by ID\n     * @param req - Express request containing comment ID and update data\n     * @param res - Express response\n     * @param next - Express next middleware\n     */\n    public updateComment = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n        const { comment_id } = req.params;\n        const data = req.body;\n        const response = await this.comment.updateComment(comment_id, data);\n        res.status(200).json(apiResponse(200, \"OK\", \"Update Comment Success\", response));\n    });\n\n    /**\n     * Delete a comment by ID\n     * @param req - Express request containing comment ID\n     * @param res - Express response\n     * @param next - Express next middleware\n     */\n    public deleteComment = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n        const { comment_id } = req.params;\n        const response: boolean = await this.comment.deleteComment(comment_id);\n        res.status(200).json(apiResponse(200, \"OK\", \"Delete Comment Success\", {}));\n    });\n\n    /**\n     * Like a comment by ID for the authenticated user\n     * @param req - Express request containing comment ID and user ID\n     * @param res - Express response\n     * @param next - Express next middleware\n     */\n    public likeComment = asyncHandler(async (req: RequestWithUser, res: Response, next: NextFunction) => {\n        const { comment_id } = req.params;\n        const user_id = req.user.pk;\n        const response = await this.comment.likeComment(comment_id, user_id);\n        res.status(200).json(apiResponse(200, \"OK\", \"Like Comment Success\", response));\n    });\n}"],"names":["CommentController","comment","Container","get","CommentService","getComments","asyncHandler","req","res","next","response","status","json","apiResponse","comments","getCommentsByArticle","article_id","params","createComment","author_id","user","pk","data","body","updateComment","comment_id","deleteComment","likeComment","user_id"],"mappings":";;;;+BAeaA;;;eAAAA;;;iCATkB;6BACH;wBACJ;4EACC;;;;;;;;;;;;;;;;;;;AAMlB,IAAA,AAAMA,oBAAN,MAAMA;;QAIT,uBAAQC,WAAUC,iBAAS,CAACC,GAAG,CAACC,+BAAc;QAQ9C,uBAAOC,eAAcC,IAAAA,4BAAY,EAAE,OAAOC,KAAsBC,KAAeC;YAC3E,MAAMC,WAAW,MAAM,IAAI,CAACT,OAAO,CAACI,WAAW;YAC/CG,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,uBAAuBH,SAASI,QAAQ;QACxF;QAQA,uBAAOC,wBAAuBT,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YACnF,MAAM,EAAEO,UAAU,EAAE,GAAGT,IAAIU,MAAM;YACjC,MAAMP,WAAW,MAAM,IAAI,CAACT,OAAO,CAACc,oBAAoB,CAACC;YACzDR,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,uBAAuBH,SAASI,QAAQ;QACxF;QAQA,uBAAOI,iBAAgBZ,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC5E,MAAM,EAAEO,UAAU,EAAE,GAAGT,IAAIU,MAAM;YACjC,MAAME,YAAYZ,IAAIa,IAAI,CAACC,EAAE;YAC7B,MAAMC,OAAOf,IAAIgB,IAAI;YACrB,MAAMb,WAAW,MAAM,IAAI,CAACT,OAAO,CAACiB,aAAa,CAACF,YAAYG,WAAWG;YACzEd,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,0BAA0BH;QAC1E;QAQA,uBAAOc,iBAAgBlB,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC5E,MAAM,EAAEgB,UAAU,EAAE,GAAGlB,IAAIU,MAAM;YACjC,MAAMK,OAAOf,IAAIgB,IAAI;YACrB,MAAMb,WAAW,MAAM,IAAI,CAACT,OAAO,CAACuB,aAAa,CAACC,YAAYH;YAC9Dd,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,0BAA0BH;QAC1E;QAQA,uBAAOgB,iBAAgBpB,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC5E,MAAM,EAAEgB,UAAU,EAAE,GAAGlB,IAAIU,MAAM;YACjC,MAAMP,WAAoB,MAAM,IAAI,CAACT,OAAO,CAACyB,aAAa,CAACD;YAC3DjB,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,0BAA0B,CAAC;QAC3E;QAQA,uBAAOc,eAAcrB,IAAAA,4BAAY,EAAC,OAAOC,KAAsBC,KAAeC;YAC1E,MAAM,EAAEgB,UAAU,EAAE,GAAGlB,IAAIU,MAAM;YACjC,MAAMW,UAAUrB,IAAIa,IAAI,CAACC,EAAE;YAC3B,MAAMX,WAAW,MAAM,IAAI,CAACT,OAAO,CAAC0B,WAAW,CAACF,YAAYG;YAC5DpB,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAACC,IAAAA,wBAAW,EAAC,KAAK,MAAM,wBAAwBH;QACxE;;AACJ"}