{"version":3,"sources":["../../src/models/users_roles.model.ts"],"sourcesContent":["/**\n * Sequelize model definition for user-role relationships.\n * Represents the association between users and roles, including many-to-many and one-to-many relationships.\n */\nimport { Sequelize, DataTypes, Model } from \"sequelize\";\nimport { UserRole } from \"@interfaces/authentication/user-role.interface\";\n\nimport { RoleModel } from \"@models/roles.model\";\nimport { UserModel } from \"@models/users.model\";\n\n/**\n * Type for user-role creation attributes.\n */\nexport type UserRoleCreationAttributes = UserRole;\n\n/**\n * UserRoleModel class for Sequelize ORM.\n * Implements UserRole interface. Attributes are handled by Sequelize.\n */\nexport class UserRoleModel extends Model<UserRole, UserRoleCreationAttributes> {\n  // No public fields here! Let Sequelize handle attributes.\n}\n\n/**\n * Initializes the UserRoleModel with Sequelize instance and sets up associations.\n * @param sequelize - Sequelize connection instance\n * @returns UserRoleModel class\n */\nexport default function (sequelize: Sequelize): typeof UserRoleModel {\n  UserRoleModel.init(\n    {\n      user_id: {\n        allowNull: false,\n        type: DataTypes.INTEGER,\n      },\n      role_id: {\n        allowNull: false,\n        type: DataTypes.INTEGER,\n      },\n    },\n    {\n      tableName: \"users_roles\", // Table name in DB\n      timestamps: true,          // Enable created_at/updated_at\n      paranoid: true,            // Enable soft deletes (deleted_at)\n      sequelize,                 // Sequelize instance\n    },\n  );\n\n  // Set up many-to-many and one-to-many associations\n  UserModel.belongsToMany(RoleModel, { through: UserRoleModel, foreignKey: \"user_id\" });\n  RoleModel.belongsToMany(UserModel, { through: UserRoleModel, foreignKey: \"role_id\" });\n\n  UserModel.hasMany(UserRoleModel);\n  UserRoleModel.belongsTo(UserModel);\n\n  RoleModel.hasMany(UserRoleModel);\n  UserRoleModel.belongsTo(RoleModel, { foreignKey: \"role_id\", as: \"role\" });\n\n  return UserRoleModel;\n}"],"names":["UserRoleModel","Model","sequelize","init","user_id","allowNull","type","DataTypes","INTEGER","role_id","tableName","timestamps","paranoid","UserModel","belongsToMany","RoleModel","through","foreignKey","hasMany","belongsTo","as"],"mappings":";;;;;;;;;;;QAmBaA;eAAAA;;QASb;eAAA;;;2BAxB4C;4BAGlB;4BACA;AAWnB,IAAA,AAAMA,gBAAN,MAAMA,sBAAsBC,gBAAK;AAExC;AAOe,SAAf,SAAyBC,SAAoB;IAC3CF,cAAcG,IAAI,CAChB;QACEC,SAAS;YACPC,WAAW;YACXC,MAAMC,oBAAS,CAACC,OAAO;QACzB;QACAC,SAAS;YACPJ,WAAW;YACXC,MAAMC,oBAAS,CAACC,OAAO;QACzB;IACF,GACA;QACEE,WAAW;QACXC,YAAY;QACZC,UAAU;QACVV;IACF;IAIFW,qBAAS,CAACC,aAAa,CAACC,qBAAS,EAAE;QAAEC,SAAShB;QAAeiB,YAAY;IAAU;IACnFF,qBAAS,CAACD,aAAa,CAACD,qBAAS,EAAE;QAAEG,SAAShB;QAAeiB,YAAY;IAAU;IAEnFJ,qBAAS,CAACK,OAAO,CAAClB;IAClBA,cAAcmB,SAAS,CAACN,qBAAS;IAEjCE,qBAAS,CAACG,OAAO,CAAClB;IAClBA,cAAcmB,SAAS,CAACJ,qBAAS,EAAE;QAAEE,YAAY;QAAWG,IAAI;IAAO;IAEvE,OAAOpB;AACT"}