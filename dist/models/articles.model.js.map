{"version":3,"sources":["../../src/models/articles.model.ts"],"sourcesContent":["/**\n * Sequelize model definition for articles.\n * Represents articles created by users, including associations and scopes for related entities.\n */\nimport { Sequelize, DataTypes, Model, Optional } from \"sequelize\";\n\nimport { User } from \"@interfaces/user.interface\";\nimport { File } from \"@interfaces/file.interface\";\nimport { Article } from \"@interfaces/article.interface\";\nimport { ArticleCategory } from \"@interfaces/article.interface\";\n\nimport { UserModel } from \"@models/users.model\";\nimport { FileModel } from \"@models/files.model\";\nimport { CategoryModel } from '@models/categories.model';\nimport { ArticleCategoryModel } from '@models/articles_categories.model';\n\n/**\n * Type for article creation attributes, omitting pk and uuid for auto-generation.\n */\nexport type ArticleCreationAttributes = Optional<Article, \"pk\" | \"uuid\">;\n\n/**\n * ArticleModel class for Sequelize ORM.\n * Implements Article interface and adds timestamp fields.\n */\nexport class ArticleModel extends Model<Article, ArticleCreationAttributes> {\n  public readonly created_at!: Date; // Timestamp for creation\n  public readonly updated_at!: Date; // Timestamp for last update\n  public readonly deleted_at: Date;  // Timestamp for deletion (paranoid)\n}\n\n/**\n * Initializes the ArticleModel with Sequelize instance and sets up associations and scopes.\n * @param sequelize - Sequelize connection instance\n * @returns ArticleModel class\n */\nexport default function (sequelize: Sequelize): typeof ArticleModel {\n  ArticleModel.init(\n    {\n      pk: {\n        type: DataTypes.INTEGER,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      uuid: {\n        type: DataTypes.UUID,\n        defaultValue: DataTypes.UUIDV4,\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      description: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      content: {\n        type: DataTypes.TEXT,\n        allowNull: false,\n      },\n      thumbnail_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        // references: FileModel, key: \"pk\"\n        // onDelete/onUpdate: \"CASCADE\"\n      },  \n      author_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        // references: UserModel, key: \"pk\"\n        // onDelete/onUpdate: \"CASCADE\"\n      },\n    },\n    {\n      tableName: \"articles\", // Table name in DB\n      timestamps: true,       // Enable created_at/updated_at\n      paranoid: true,         // Enable soft deletes (deleted_at)\n      sequelize,              // Sequelize instance\n      defaultScope: {\n        include: [\n          {\n            attributes: [\"uuid\"],\n            model: FileModel,\n            as: \"thumbnail\",\n          },\n          {\n            attributes: [\"uuid\", \"full_name\", \"display_picture\"],\n            model: UserModel,\n            as: \"author\",\n            include: [\n              {\n                attributes: [\"uuid\"],\n                model: FileModel,\n                as: \"avatar\"\n              }\n            ]\n          },\n          {\n            attributes: [\"category_id\"],\n            model: ArticleCategoryModel,\n            as: \"categories\",\n            include: [{\n              attributes: [\"uuid\", \"name\", \"description\"],\n              model: CategoryModel, \n              as: \"category\"\n            }]\n          }\n        ],\n      }\n    },\n  );\n\n  // Set up associations for thumbnail, author, and categories\n  FileModel.hasOne(ArticleModel, {\n    foreignKey: \"thumbnail_id\",\n    as: \"thumbnail\"\n  });\n\n  ArticleModel.belongsTo(FileModel, {\n    foreignKey: \"thumbnail_id\",\n    as: \"thumbnail\"\n  });\n\n  UserModel.hasMany(ArticleModel, {\n    foreignKey: \"author_id\",\n    as: \"author\"\n  });\n\n  ArticleModel.belongsTo(UserModel, {\n    foreignKey: \"author_id\",\n    as: \"author\"\n  });\n\n  return ArticleModel;\n}"],"names":["ArticleModel","Model","created_at","updated_at","deleted_at","sequelize","init","pk","type","DataTypes","INTEGER","primaryKey","autoIncrement","uuid","UUID","defaultValue","UUIDV4","title","STRING","allowNull","description","content","TEXT","thumbnail_id","author_id","tableName","timestamps","paranoid","defaultScope","include","attributes","model","FileModel","as","UserModel","ArticleCategoryModel","CategoryModel","hasOne","foreignKey","belongsTo","hasMany"],"mappings":";;;;;;;;;;;QAyBaA;eAAAA;;QAWb;eAAA;;;2BAhCsD;4BAO5B;4BACA;iCACI;0CACO;;;;;;;;;;;;;;AAW9B,IAAA,AAAMA,eAAN,MAAMA,qBAAqBC,gBAAK;;QAAhC,gBACL,uBAAgBC,cAAhB,KAAA,IACA,uBAAgBC,cAAhB,KAAA,IACA,uBAAgBC,cAAhB,KAAA;;AACF;AAOe,SAAf,SAAyBC,SAAoB;IAC3CL,aAAaM,IAAI,CACf;QACEC,IAAI;YACFC,MAAMC,oBAAS,CAACC,OAAO;YACvBC,YAAY;YACZC,eAAe;QACjB;QACAC,MAAM;YACJL,MAAMC,oBAAS,CAACK,IAAI;YACpBC,cAAcN,oBAAS,CAACO,MAAM;QAChC;QACAC,OAAO;YACLT,MAAMC,oBAAS,CAACS,MAAM;YACtBC,WAAW;QACb;QACAC,aAAa;YACXZ,MAAMC,oBAAS,CAACS,MAAM;YACtBC,WAAW;QACb;QACAE,SAAS;YACPb,MAAMC,oBAAS,CAACa,IAAI;YACpBH,WAAW;QACb;QACAI,cAAc;YACZf,MAAMC,oBAAS,CAACC,OAAO;YACvBS,WAAW;QAGb;QACAK,WAAW;YACThB,MAAMC,oBAAS,CAACC,OAAO;YACvBS,WAAW;QAGb;IACF,GACA;QACEM,WAAW;QACXC,YAAY;QACZC,UAAU;QACVtB;QACAuB,cAAc;YACZC,SAAS;gBACP;oBACEC,YAAY;wBAAC;qBAAO;oBACpBC,OAAOC,qBAAS;oBAChBC,IAAI;gBACN;gBACA;oBACEH,YAAY;wBAAC;wBAAQ;wBAAa;qBAAkB;oBACpDC,OAAOG,qBAAS;oBAChBD,IAAI;oBACJJ,SAAS;wBACP;4BACEC,YAAY;gCAAC;6BAAO;4BACpBC,OAAOC,qBAAS;4BAChBC,IAAI;wBACN;qBACD;gBACH;gBACA;oBACEH,YAAY;wBAAC;qBAAc;oBAC3BC,OAAOI,8CAAoB;oBAC3BF,IAAI;oBACJJ,SAAS;wBAAC;4BACRC,YAAY;gCAAC;gCAAQ;gCAAQ;6BAAc;4BAC3CC,OAAOK,8BAAa;4BACpBH,IAAI;wBACN;qBAAE;gBACJ;aACD;QACH;IACF;IAIFD,qBAAS,CAACK,MAAM,CAACrC,cAAc;QAC7BsC,YAAY;QACZL,IAAI;IACN;IAEAjC,aAAauC,SAAS,CAACP,qBAAS,EAAE;QAChCM,YAAY;QACZL,IAAI;IACN;IAEAC,qBAAS,CAACM,OAAO,CAACxC,cAAc;QAC9BsC,YAAY;QACZL,IAAI;IACN;IAEAjC,aAAauC,SAAS,CAACL,qBAAS,EAAE;QAChCI,YAAY;QACZL,IAAI;IACN;IAEA,OAAOjC;AACT"}