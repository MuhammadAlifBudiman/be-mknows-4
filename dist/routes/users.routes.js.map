{"version":3,"sources":["../../src/routes/users.routes.ts"],"sourcesContent":["// Import Express Router for route definitions\nimport { Router } from \"express\";\n// Import the Routes interface for consistent route structure\nimport { Routes } from \"@interfaces/routes.interface\";\n// Import the UserController to handle user-related logic\nimport { UserController } from \"@controllers/user.controller\";\n// Import authentication middleware and role-based authorization for user routes\nimport { AuthMiddleware, AuthorizedRoles } from \"@middlewares/auth.middleware\";\n// Import rate limiter middleware to control request rate\nimport Limitter from \"@middlewares/rate-limitter.middleware\";\n// import { ValidationMiddleware } from \"@middlewares/validation.middleware\"; // (Commented: for future validation)\n// import { CreateUserDto } from \"@dtos/users.dto\"; // (Commented: for future user creation validation)\n\n/**\n * Route definition class for user-related endpoints.\n * Implements the Routes interface to provide path, router, and controller.\n */\nexport class UserRoute implements Routes {\n  /**\n   * The base path for user routes.\n   * @type {string}\n   */\n  public path = \"users\";\n  /**\n   * Express router instance for user routes.\n   * @type {Router}\n   */\n  public router = Router();\n  /**\n   * Controller instance to handle user logic.\n   * @type {UserController}\n   */\n  public user = new UserController();\n  /**\n   * Rate limiter instance for user routes.\n   * @type {Limitter}\n   */\n  public limitter = new Limitter();\n\n  /**\n   * Initializes the user route and sets up endpoints.\n   */\n  constructor() {\n    this.initializeRoutes();\n  }\n\n  /**\n   * Defines all user-related endpoints and their middlewares.\n   *\n   * - GET /v1/users/check: Get user agent information\n   * - GET /v1/users: Get all users (rate limited, admin only)\n   * - GET /v1/users/:uuid: Get user by UUID\n   */\n  private initializeRoutes() {\n    // Route for checking user agent information\n    this.router.get(`/v1/users/check`, this.user.getUseragent);\n    // Route for retrieving all users (rate limited, requires admin role)\n    this.router.get(`/v1/${this.path}`, \n      this.limitter.default(), \n      AuthMiddleware, AuthorizedRoles([\"ADMIN\"]), \n      this.user.getUsers\n    );\n    // Route for retrieving a user by UUID\n    this.router.get(`/v1/${this.path}/:uuid`, this.user.getUserByUUID);\n  }\n}"],"names":["UserRoute","initializeRoutes","router","get","user","getUseragent","path","limitter","default","AuthMiddleware","AuthorizedRoles","getUsers","getUserByUUID","constructor","Router","UserController","Limitter"],"mappings":";;;;+BAiBaA;;;eAAAA;;;yBAhBU;gCAIQ;gCAEiB;+EAE3B;;;;;;;;;;;;;;;;;;;AAQd,IAAA,AAAMA,YAAN,MAAMA;IAoCHC,mBAAmB;QAEzB,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC,CAAC,eAAe,CAAC,EAAE,IAAI,CAACC,IAAI,CAACC,YAAY;QAEzD,IAAI,CAACH,MAAM,CAACC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,CAACG,IAAI,EAAE,EAChC,IAAI,CAACC,QAAQ,CAACC,OAAO,IACrBC,8BAAc,EAAEC,IAAAA,+BAAe,EAAC;YAAC;SAAQ,GACzC,IAAI,CAACN,IAAI,CAACO,QAAQ;QAGpB,IAAI,CAACT,MAAM,CAACC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,CAACG,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAACF,IAAI,CAACQ,aAAa;IACnE;IAtBAC,aAAc;QApBd,uBAAOP,QAAO;QAKd,uBAAOJ,UAASY,IAAAA,eAAM;QAKtB,uBAAOV,QAAO,IAAIW,8BAAc;QAKhC,uBAAOR,YAAW,IAAIS,+BAAQ;QAM5B,IAAI,CAACf,gBAAgB;IACvB;AAqBF"}