{"version":3,"sources":["../../src/routes/files.routes.ts"],"sourcesContent":["// Import Router from Express to define route handlers\nimport { Router } from \"express\";\n// Import the Routes interface for consistent route structure\nimport { Routes } from \"@interfaces/routes.interface\";\n// Import the FileController to handle file-related logic\nimport { FileController } from \"@controllers/file.controller\";\n// Import authentication middleware to protect file routes\nimport { AuthMiddleware } from \"@middlewares/auth.middleware\";\n// Import file upload middlewares for local and S3 uploads\nimport { uploadFile, uploadToS3 } from \"@middlewares/file-uploader.middleware\";\n// Import environment variable to determine upload strategy\nimport { NODE_ENV } from \"@config/index\";\n\n/**\n * Route definition class for file-related endpoints.\n * Implements the Routes interface to provide path, router, and controller.\n */\nexport class FileRoute implements Routes {\n  /**\n   * The base path for file routes.\n   * @type {string}\n   */\n  public path = \"files\";\n  /**\n   * Express router instance for file routes.\n   * @type {Router}\n   */\n  public router = Router();\n  /**\n   * Controller instance to handle file logic.\n   * @type {FileController}\n   */\n  public file = new FileController();\n\n  /**\n   * Initializes the file route and sets up endpoints.\n   */\n  constructor() {\n    this.initializeRoutes();\n  }\n\n  /**\n   * Defines all file-related endpoints and their middlewares.\n   *\n   * - POST /v1/files/upload: Upload a file (auth, upload middleware, S3 in production)\n   * - GET /v1/files/:file_id/preview: Preview a file by its UUID (auth)\n   * - GET /v1/files/mine: Get files uploaded by the authenticated user (auth)\n   */\n  private initializeRoutes() {\n    /**\n     * Selects upload middlewares based on environment:\n     * - Production: Auth, local upload, then S3 upload\n     * - Development: Auth, local upload only\n     */\n    const uploadMiddlewares =\n      NODE_ENV === \"production\"\n        ? [AuthMiddleware, uploadFile.single(\"file\"), uploadToS3]\n        : [AuthMiddleware, uploadFile.single(\"file\")];\n\n    // Route for uploading a file\n    this.router.post(\n      `/v1/${this.path}/upload`,\n      ...uploadMiddlewares,\n      this.file.uploadFile\n    );\n    // Route for previewing a file by its UUID\n    this.router.get(\n      `/v1/${this.path}/:file_id/preview`, \n      AuthMiddleware, \n      this.file.getFileWithUUID\n    );\n    // Route for retrieving files uploaded by the authenticated user\n    this.router.get(\n      `/v1/${this.path}/mine`, \n      AuthMiddleware, \n      this.file.getFileMine\n    );\n  }\n}"],"names":["FileRoute","initializeRoutes","uploadMiddlewares","NODE_ENV","AuthMiddleware","uploadFile","single","uploadToS3","router","post","path","file","get","getFileWithUUID","getFileMine","constructor","Router","FileController"],"mappings":";;;;+BAiBaA;;;eAAAA;;;yBAhBU;gCAIQ;gCAEA;wCAEQ;uBAEd;;;;;;;;;;;;;;AAMlB,IAAA,AAAMA,YAAN,MAAMA;IA+BHC,mBAAmB;QAMzB,MAAMC,oBACJC,eAAQ,KAAK,eACT;YAACC,8BAAc;YAAEC,kCAAU,CAACC,MAAM,CAAC;YAASC,kCAAU;SAAC,GACvD;YAACH,8BAAc;YAAEC,kCAAU,CAACC,MAAM,CAAC;SAAQ;QAGjD,IAAI,CAACE,MAAM,CAACC,IAAI,CACd,CAAC,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC,OAAO,CAAC,KACtBR,mBACH,IAAI,CAACS,IAAI,CAACN,UAAU;QAGtB,IAAI,CAACG,MAAM,CAACI,GAAG,CACb,CAAC,IAAI,EAAE,IAAI,CAACF,IAAI,CAAC,iBAAiB,CAAC,EACnCN,8BAAc,EACd,IAAI,CAACO,IAAI,CAACE,eAAe;QAG3B,IAAI,CAACL,MAAM,CAACI,GAAG,CACb,CAAC,IAAI,EAAE,IAAI,CAACF,IAAI,CAAC,KAAK,CAAC,EACvBN,8BAAc,EACd,IAAI,CAACO,IAAI,CAACG,WAAW;IAEzB;IAxCAC,aAAc;QAfd,uBAAOL,QAAO;QAKd,uBAAOF,UAASQ,IAAAA,eAAM;QAKtB,uBAAOL,QAAO,IAAIM,8BAAc;QAM9B,IAAI,CAAChB,gBAAgB;IACvB;AAuCF"}