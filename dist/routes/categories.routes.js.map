{"version":3,"sources":["../../src/routes/categories.routes.ts"],"sourcesContent":["/**\n * Route definition for category-related endpoints.\n * Uses CategoryController for business logic and applies authentication and validation middleware.\n */\nimport { Router } from \"express\"; // Express router\nimport { Routes } from \"@interfaces/routes.interface\"; // Route interface\n\nimport { AuthMiddleware } from \"@middlewares/auth.middleware\"; // Middleware for authentication\nimport { ValidationMiddleware } from \"@middlewares/validation.middleware\"; // Middleware for request validation\nimport { CategoryController } from '@/controllers/category.controller'; // Controller for category operations\nimport { CreateCategoryDto, UpdateCategoryDto } from '@/dtos/categories.dto'; // DTOs for category validation\n\n/**\n * CategoryRoute class implements category-related routes.\n * - path: Base path for category routes\n * - router: Express router instance\n * - controller: CategoryController instance\n */\nexport class CategoryRoute implements Routes {\n  public path = \"categories\";\n  public router = Router();\n  public controller = new CategoryController();\n\n  constructor() {\n    this.initializeRoutes();\n  }\n\n  /**\n   * Initializes category routes and applies middleware.\n   * - GET /: Get all categories\n   * - POST /: Create a new category (auth & validation required)\n   * - PUT /:category_id: Update a category (auth & validation required)\n   * - DELETE /:category_id: Delete a category (auth required)\n   */\n  private initializeRoutes() {\n    this.router.get(`/v1/${this.path}`, this.controller.getCategories);\n    this.router.post(`/v1/${this.path}`, \n      AuthMiddleware, ValidationMiddleware(CreateCategoryDto), \n      this.controller.createCategory\n    );\n    this.router.put(\n      `/v1/${this.path}/:category_id`, \n      AuthMiddleware, ValidationMiddleware(UpdateCategoryDto), \n      this.controller.updateCategory\n    );\n    this.router.delete(\n      `/v1/${this.path}/:category_id`,\n      AuthMiddleware,\n      this.controller.deleteCategory\n    )\n  }\n}"],"names":["CategoryRoute","initializeRoutes","router","get","path","controller","getCategories","post","AuthMiddleware","ValidationMiddleware","CreateCategoryDto","createCategory","put","UpdateCategoryDto","updateCategory","delete","deleteCategory","constructor","Router","CategoryController"],"mappings":";;;;+BAkBaA;;;eAAAA;;;yBAdU;gCAGQ;sCACM;oCACF;+BACkB;;;;;;;;;;;;;;AAQ9C,IAAA,AAAMA,gBAAN,MAAMA;IAgBHC,mBAAmB;QACzB,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,CAACC,IAAI,EAAE,EAAE,IAAI,CAACC,UAAU,CAACC,aAAa;QACjE,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAACH,IAAI,EAAE,EACjCI,8BAAc,EAAEC,IAAAA,0CAAoB,EAACC,gCAAiB,GACtD,IAAI,CAACL,UAAU,CAACM,cAAc;QAEhC,IAAI,CAACT,MAAM,CAACU,GAAG,CACb,CAAC,IAAI,EAAE,IAAI,CAACR,IAAI,CAAC,aAAa,CAAC,EAC/BI,8BAAc,EAAEC,IAAAA,0CAAoB,EAACI,gCAAiB,GACtD,IAAI,CAACR,UAAU,CAACS,cAAc;QAEhC,IAAI,CAACZ,MAAM,CAACa,MAAM,CAChB,CAAC,IAAI,EAAE,IAAI,CAACX,IAAI,CAAC,aAAa,CAAC,EAC/BI,8BAAc,EACd,IAAI,CAACH,UAAU,CAACW,cAAc;IAElC;IA3BAC,aAAc;QAJd,uBAAOb,QAAO;QACd,uBAAOF,UAASgB,IAAAA,eAAM;QACtB,uBAAOb,cAAa,IAAIc,sCAAkB;QAGxC,IAAI,CAAClB,gBAAgB;IACvB;AA0BF"}