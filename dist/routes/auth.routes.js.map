{"version":3,"sources":["../../src/routes/auth.routes.ts"],"sourcesContent":["/**\n * Route definition for authentication-related endpoints.\n * Uses AuthController for business logic and applies authentication and validation middleware.\n */\nimport { Router } from \"express\"; // Express router\nimport { Routes } from \"@interfaces/routes.interface\"; // Route interface\n\nimport { AuthController } from \"@controllers/auth.controller\"; // Controller for authentication operations\nimport { AuthMiddleware } from \"@middlewares/auth.middleware\"; // Middleware for authentication\nimport { ValidationMiddleware } from \"@middlewares/validation.middleware\"; // Middleware for request validation\nimport { CreateUserDto, LoginUserDto } from \"@dtos/users.dto\"; // DTOs for user registration and login\n\n/**\n * AuthRoute class implements authentication-related routes.\n * - path: Base path for auth routes\n * - router: Express router instance\n * - auth: AuthController instance\n */\nexport class AuthRoute implements Routes {\n  public path = \"auth\";\n  public router = Router();\n  public auth = new AuthController();\n\n  constructor() {\n    this.initializeRoutes();\n  }\n\n  /**\n   * Initializes authentication routes and applies middleware.\n   * - POST /register: Register a new user (validation required)\n   * - POST /login: Log in a user (validation required)\n   * - POST /logout: Log out the authenticated user\n   * - POST /verify: Verify user email\n   * - POST /:uuid/assign-role: Assign a role to a user (development/testing only)\n   */\n  private initializeRoutes() {\n    this.router.post(`/v1/${this.path}/register`, ValidationMiddleware(CreateUserDto), this.auth.signUp);\n    this.router.post(`/v1/${this.path}/login`, ValidationMiddleware(LoginUserDto), this.auth.logIn);\n    this.router.post(`/v1/${this.path}/logout`, AuthMiddleware, this.auth.logOut);\n\n    this.router.post(`/v1/${this.path}/verify`, this.auth.verifyEmail);\n\n    // Assign role endpoint (development/testing only)\n    if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {\n      this.router.post(`/v1/${this.path}/:uuid/assign-role`, this.auth.assignRoleToUser);\n    }\n  }\n}"],"names":["AuthRoute","initializeRoutes","router","post","path","ValidationMiddleware","CreateUserDto","auth","signUp","LoginUserDto","logIn","AuthMiddleware","logOut","verifyEmail","process","env","NODE_ENV","assignRoleToUser","constructor","Router","AuthController"],"mappings":";;;;+BAkBaA;;;eAAAA;;;yBAdU;gCAGQ;gCACA;sCACM;0BACO;;;;;;;;;;;;;;AAQrC,IAAA,AAAMA,YAAN,MAAMA;IAiBHC,mBAAmB;QACzB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC,SAAS,CAAC,EAAEC,IAAAA,0CAAoB,EAACC,uBAAa,GAAG,IAAI,CAACC,IAAI,CAACC,MAAM;QACnG,IAAI,CAACN,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC,MAAM,CAAC,EAAEC,IAAAA,0CAAoB,EAACI,sBAAY,GAAG,IAAI,CAACF,IAAI,CAACG,KAAK;QAC9F,IAAI,CAACR,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC,OAAO,CAAC,EAAEO,8BAAc,EAAE,IAAI,CAACJ,IAAI,CAACK,MAAM;QAE5E,IAAI,CAACV,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAACG,IAAI,CAACM,WAAW;QAGjE,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBAAiBF,QAAQC,GAAG,CAACC,QAAQ,KAAK,QAAQ;YAC7E,IAAI,CAACd,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAACG,IAAI,CAACU,gBAAgB;QACnF;IACF;IAvBAC,aAAc;QAJd,uBAAOd,QAAO;QACd,uBAAOF,UAASiB,IAAAA,eAAM;QACtB,uBAAOZ,QAAO,IAAIa,8BAAc;QAG9B,IAAI,CAACnB,gBAAgB;IACvB;AAsBF"}