{"version":3,"sources":["../../src/database/ensureDatabase.ts"],"sourcesContent":["import { logger } from \"@utils/logger\";\n\nexport async function ensureDatabaseExists() {\n  const { Client } = require('pg');\n  const { DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_DATABASE } = process.env;\n  const client = new Client({\n    host: DB_HOST,\n    port: DB_PORT ? Number(DB_PORT) : undefined,\n    user: DB_USER,\n    password: DB_PASSWORD,\n    database: 'postgres',\n    ssl: {\n        rejectUnauthorized: false, // or true if you want strict SSL\n    },\n  });\n  try {\n    await client.connect();\n    const res = await client.query(\n      'SELECT 1 FROM pg_database WHERE datname = $1',\n      [DB_DATABASE]\n    );\n    if (res.rowCount === 0) {\n      try {\n        await client.query(`CREATE DATABASE \"${DB_DATABASE}\"`);\n        logger.info(`Database '${DB_DATABASE}' created successfully.`);\n      } catch (err: any) {\n        if (err.code === '42P04' || (err.message && err.message.includes('already exists'))) {\n          logger.info(`Database '${DB_DATABASE}' already exists (race condition).`);\n        } else {\n          throw err;\n        }\n      }\n    } else {\n      logger.info(`Database '${DB_DATABASE}' already exists.`);\n    }\n  } catch (err: any) {\n    logger.error('Error checking/creating database: ' + err.message);\n    process.exit(1);\n  } finally {\n    await client.end();\n  }\n}\n"],"names":["ensureDatabaseExists","Client","require","DB_HOST","DB_PORT","DB_USER","DB_PASSWORD","DB_DATABASE","process","env","client","host","port","Number","undefined","user","password","database","ssl","rejectUnauthorized","connect","res","query","rowCount","logger","info","err","code","message","includes","error","exit","end"],"mappings":";;;;+BAEsBA;;;eAAAA;;;wBAFC;AAEhB,eAAeA;IACpB,MAAM,EAAEC,MAAM,EAAE,GAAGC,QAAQ;IAC3B,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAEC,WAAW,EAAE,GAAGC,QAAQC,GAAG;IAC3E,MAAMC,SAAS,IAAIT,OAAO;QACxBU,MAAMR;QACNS,MAAMR,UAAUS,OAAOT,WAAWU;QAClCC,MAAMV;QACNW,UAAUV;QACVW,UAAU;QACVC,KAAK;YACDC,oBAAoB;QACxB;IACF;IACA,IAAI;QACF,MAAMT,OAAOU,OAAO;QACpB,MAAMC,MAAM,MAAMX,OAAOY,KAAK,CAC5B,gDACA;YAACf;SAAY;QAEf,IAAIc,IAAIE,QAAQ,KAAK,GAAG;YACtB,IAAI;gBACF,MAAMb,OAAOY,KAAK,CAAC,CAAC,iBAAiB,EAAEf,YAAY,CAAC,CAAC;gBACrDiB,cAAM,CAACC,IAAI,CAAC,CAAC,UAAU,EAAElB,YAAY,uBAAuB,CAAC;YAC/D,EAAE,OAAOmB,KAAU;gBACjB,IAAIA,IAAIC,IAAI,KAAK,WAAYD,IAAIE,OAAO,IAAIF,IAAIE,OAAO,CAACC,QAAQ,CAAC,mBAAoB;oBACnFL,cAAM,CAACC,IAAI,CAAC,CAAC,UAAU,EAAElB,YAAY,kCAAkC,CAAC;gBAC1E,OAAO;oBACL,MAAMmB;gBACR;YACF;QACF,OAAO;YACLF,cAAM,CAACC,IAAI,CAAC,CAAC,UAAU,EAAElB,YAAY,iBAAiB,CAAC;QACzD;IACF,EAAE,OAAOmB,KAAU;QACjBF,cAAM,CAACM,KAAK,CAAC,uCAAuCJ,IAAIE,OAAO;QAC/DpB,QAAQuB,IAAI,CAAC;IACf,SAAU;QACR,MAAMrB,OAAOsB,GAAG;IAClB;AACF"}