{"version":3,"sources":["../../src/database/db-lazy.ts"],"sourcesContent":["/**\n * Lazy database initialization and model registration for Sequelize ORM.\n * Ensures a single database connection and model setup per application lifecycle.\n */\nimport { Sequelize } from \"sequelize\"; // Sequelize ORM library\nimport { NODE_ENV } from \"@config/index\"; // Current environment\nimport { logger } from \"@utils/logger\"; // Logger utility\nimport config from \"@config/database\"; // Database configuration\n// Import all Sequelize models\nimport OTPModel from \"@/models/otps.model\";\nimport RoleModel from \"@models/roles.model\";\nimport FileModel from \"@models/files.model\";\nimport UserModel from \"@models/users.model\";\nimport UserRoleModel from \"@models/users_roles.model\";\nimport UserSessionModel from \"@models/users_sessions.model\";\nimport CategoryModel from \"@models/categories.model\";\nimport ArticleModel from \"@models/articles.model\";\nimport ArticleCategoryModel from \"@models/articles_categories.model\";\nimport ArticleLikeModel from \"@models/articles_likes.model\";\nimport ArticleCommentModel from \"@/models/articles_comments.model\";\nimport CommentReplyModel from \"@/models/articles_replies.model\";\nimport ArticleCommentLikeModel from \"@/models/articles_comments_like.model\";\nimport CommentReplyLikeModel from \"@/models/articles_replies_like.model\";\nimport ArticleBookmarkModel from \"@/models/articles_bookmark.model\";\nimport ArticleViewModel from \"@/models/articles_views.model\";\n\n// Singleton database instance and state flags\nlet DB: any = null;\nlet initializing = false;\nlet initialized = false;\n\n/**\n * Returns the initialized database object with all models.\n * Ensures only one connection and initialization (lazy loading).\n * @returns {Promise<any>} Database object with models and Sequelize instance\n */\nexport async function getDB() {\n  // Return DB if already initialized\n  if (initialized) return DB;\n  // Wait if initialization is in progress\n  if (initializing) {\n    while (!initialized) {\n      await new Promise((resolve) => setTimeout(resolve, 50));\n    }\n    return DB;\n  }\n  initializing = true;\n\n  // Get config for current environment\n  const dbConfig = config[NODE_ENV] || config[\"development\"];\n  // Create Sequelize instance\n  const sequelize = new Sequelize(\n    dbConfig.database as string,\n    dbConfig.username as string,\n    dbConfig.password,\n    dbConfig\n  );\n  // Authenticate connection\n  await sequelize.authenticate();\n  logger.info(`=> Database Connected on ${NODE_ENV}`);\n\n  // Register all models with Sequelize instance\n  DB = {\n    OTPs: OTPModel(sequelize),\n    Files: FileModel(sequelize),\n    Roles: RoleModel(sequelize),\n    Users: UserModel(sequelize),\n    UsersRoles: UserRoleModel(sequelize),\n    UsersSessions: UserSessionModel(sequelize),\n    Categories: CategoryModel(sequelize),\n    Articles: ArticleModel(sequelize),\n    ArticlesCategories: ArticleCategoryModel(sequelize),\n    ArticlesLikes: ArticleLikeModel(sequelize),\n    ArticlesComments: ArticleCommentModel(sequelize),\n    CommentsReplies: CommentReplyModel(sequelize),\n    ArticleCommentsLikes: ArticleCommentLikeModel(sequelize),\n    CommentsRepliesLikes: CommentReplyLikeModel(sequelize),\n    ArticlesBookmarks: ArticleBookmarkModel(sequelize),\n    ArticlesViews: ArticleViewModel(sequelize),\n    sequelize, // Sequelize connection instance (for raw queries)\n    Sequelize, // Sequelize library\n  };\n  initialized = true;\n  return DB;\n}\n"],"names":["getDB","DB","initializing","initialized","Promise","resolve","setTimeout","dbConfig","config","NODE_ENV","sequelize","Sequelize","database","username","password","authenticate","logger","info","OTPs","OTPModel","Files","FileModel","Roles","RoleModel","Users","UserModel","UsersRoles","UserRoleModel","UsersSessions","UserSessionModel","Categories","CategoryModel","Articles","ArticleModel","ArticlesCategories","ArticleCategoryModel","ArticlesLikes","ArticleLikeModel","ArticlesComments","ArticleCommentModel","CommentsReplies","CommentReplyModel","ArticleCommentsLikes","ArticleCommentLikeModel","CommentsRepliesLikes","CommentReplyLikeModel","ArticlesBookmarks","ArticleBookmarkModel","ArticlesViews","ArticleViewModel"],"mappings":";;;;+BAoCsBA;;;eAAAA;;;2BAhCI;uBACD;wBACF;iEACJ;kEAEE;mEACC;mEACA;mEACA;yEACI;4EACG;wEACH;sEACD;iFACQ;4EACJ;+EACG;8EACF;oFACM;mFACF;+EACD;4EACJ;;;;;;AAG7B,IAAIC,KAAU;AACd,IAAIC,eAAe;AACnB,IAAIC,cAAc;AAOX,eAAeH;IAEpB,IAAIG,aAAa,OAAOF;IAExB,IAAIC,cAAc;QAChB,MAAO,CAACC,YAAa;YACnB,MAAM,IAAIC,QAAQ,CAACC,UAAYC,WAAWD,SAAS;QACrD;QACA,OAAOJ;IACT;IACAC,eAAe;IAGf,MAAMK,WAAWC,iBAAM,CAACC,eAAQ,CAAC,IAAID,iBAAM,CAAC,cAAc;IAE1D,MAAME,YAAY,IAAIC,oBAAS,CAC7BJ,SAASK,QAAQ,EACjBL,SAASM,QAAQ,EACjBN,SAASO,QAAQ,EACjBP;IAGF,MAAMG,UAAUK,YAAY;IAC5BC,cAAM,CAACC,IAAI,CAAC,CAAC,yBAAyB,EAAER,eAAQ,EAAE;IAGlDR,KAAK;QACHiB,MAAMC,IAAAA,kBAAQ,EAACT;QACfU,OAAOC,IAAAA,mBAAS,EAACX;QACjBY,OAAOC,IAAAA,mBAAS,EAACb;QACjBc,OAAOC,IAAAA,mBAAS,EAACf;QACjBgB,YAAYC,IAAAA,yBAAa,EAACjB;QAC1BkB,eAAeC,IAAAA,4BAAgB,EAACnB;QAChCoB,YAAYC,IAAAA,wBAAa,EAACrB;QAC1BsB,UAAUC,IAAAA,sBAAY,EAACvB;QACvBwB,oBAAoBC,IAAAA,iCAAoB,EAACzB;QACzC0B,eAAeC,IAAAA,4BAAgB,EAAC3B;QAChC4B,kBAAkBC,IAAAA,+BAAmB,EAAC7B;QACtC8B,iBAAiBC,IAAAA,8BAAiB,EAAC/B;QACnCgC,sBAAsBC,IAAAA,oCAAuB,EAACjC;QAC9CkC,sBAAsBC,IAAAA,mCAAqB,EAACnC;QAC5CoC,mBAAmBC,IAAAA,+BAAoB,EAACrC;QACxCsC,eAAeC,IAAAA,4BAAgB,EAACvC;QAChCA;QACAC,WAAAA,oBAAS;IACX;IACAR,cAAc;IACd,OAAOF;AACT"}