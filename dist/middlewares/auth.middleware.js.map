{"version":3,"sources":["../../src/middlewares/auth.middleware.ts"],"sourcesContent":["/**\n * Authentication middleware for Express routes.\n * Handles JWT verification, user session validation, and role-based authorization.\n */\nimport { Request, Response, NextFunction } from \"express\"; // Express types\nimport { verify } from \"jsonwebtoken\"; // JWT verification\n\nimport { SECRET_KEY } from \"@config/index\"; // Secret key for JWT\nimport { HttpException } from \"@exceptions/HttpException\"; // Custom HTTP exception\n\nimport { UserRole } from \"@interfaces/authentication/user-role.interface\"; // User role interface\nimport { UserSession } from \"@interfaces/user-session.interface\"; // User session interface\nimport { UserAgent } from \"@interfaces/common/useragent.interface\"; // User agent interface\nimport { DataStoredInToken, RequestWithUser } from \"@interfaces/authentication/token.interface\"; // Token and request interfaces\n\nimport { AuthService } from \"@services/auth.service\"; // Auth service\nimport { getUserAgent } from \"@utils/userAgent\"; // User agent utility\n\n/**\n * Helper to get the Authorization token from cookies or headers.\n * @param req - Express request\n * @returns {string|null} Authorization token or null\n */\nconst getAuthorization = (req: Request) => {\n  const coockie = req.cookies[\"Authorization\"];\n  if (coockie) return coockie;\n\n  const header = req.header(\"Authorization\");\n  if (header) return header.split(\"Bearer \")[1];\n\n  return null;\n};\n\n/**\n * Middleware to restrict access to users with specific roles.\n * @param roles - Array of allowed role names\n * @returns Express middleware function\n */\nexport const AuthorizedRoles = (roles: string[]) => {\n  return async (req: RequestWithUser, res: Response, next: NextFunction) => {\n    const userRoles = req.user_roles;\n    const hasRequiredRole = roles.some(requiredRole => userRoles.includes(requiredRole));\n\n    if (hasRequiredRole) {\n      next();\n    } else {\n      next(new HttpException(false, 403, \"Unauthorized Access #37\"));\n    }\n  };\n};\n\n/**\n * Main authentication middleware for protected routes.\n * Verifies JWT, checks session, validates user agent, and attaches user info to request.\n * @param req - Express request\n * @param res - Express response\n * @param next - Express next middleware\n */\nexport const AuthMiddleware = async (req: RequestWithUser, res: Response, next: NextFunction) => {\n  try {\n    const auth = new AuthService();\n    const Authorization: string = getAuthorization(req);\n    const userAgentPayload: UserAgent = getUserAgent(req);\n\n    if (Authorization) {\n      const { uid, sid } = verify(Authorization, SECRET_KEY) as DataStoredInToken;\n      const userSession: UserSession = await auth.checkSessionActive(sid);\n      const userRoles: UserRole[] = await auth.getUserRoles(userSession.user.pk);\n\n      if (userSession?.user?.uuid === uid) {\n        if(userAgentPayload.source === userSession.useragent) {\n          req.session_id = sid;\n          req.user = userSession.user;\n          req.user_roles = userRoles.map(userRole => userRole.role.name);\n\n          next();\n        } else {\n          next(new HttpException(false, 401, \"Invalid Token #60\"));\n        }\n      } else {\n        next(new HttpException(false, 401, \"Invalid Token #63\"));\n      }\n    } else {\n      next(new HttpException(false, 401, \"Invalid Token #66\"));\n    }\n  } catch (error) {\n    next(new HttpException(false, 401, \"Invalid Token #70\"));\n  }\n};"],"names":["AuthMiddleware","AuthorizedRoles","getAuthorization","req","coockie","cookies","header","split","roles","res","next","userRoles","user_roles","hasRequiredRole","some","requiredRole","includes","HttpException","auth","AuthService","Authorization","userAgentPayload","getUserAgent","userSession","uid","sid","verify","SECRET_KEY","checkSessionActive","getUserRoles","user","pk","uuid","source","useragent","session_id","map","userRole","role","name","error"],"mappings":";;;;;;;;;;;QA0DaA;eAAAA;;QApBAC;eAAAA;;;8BAjCU;uBAEI;+BACG;6BAOF;2BACC;AAO7B,MAAMC,mBAAmB,CAACC;IACxB,MAAMC,UAAUD,IAAIE,OAAO,CAAC,gBAAgB;IAC5C,IAAID,SAAS,OAAOA;IAEpB,MAAME,SAASH,IAAIG,MAAM,CAAC;IAC1B,IAAIA,QAAQ,OAAOA,OAAOC,KAAK,CAAC,UAAU,CAAC,EAAE;IAE7C,OAAO;AACT;AAOO,MAAMN,kBAAkB,CAACO;IAC9B,OAAO,OAAOL,KAAsBM,KAAeC;QACjD,MAAMC,YAAYR,IAAIS,UAAU;QAChC,MAAMC,kBAAkBL,MAAMM,IAAI,CAACC,CAAAA,eAAgBJ,UAAUK,QAAQ,CAACD;QAEtE,IAAIF,iBAAiB;YACnBH;QACF,OAAO;YACLA,KAAK,IAAIO,4BAAa,CAAC,OAAO,KAAK;QACrC;IACF;AACF;AASO,MAAMjB,iBAAiB,OAAOG,KAAsBM,KAAeC;IACxE,IAAI;QACF,MAAMQ,OAAO,IAAIC,wBAAW;QAC5B,MAAMC,gBAAwBlB,iBAAiBC;QAC/C,MAAMkB,mBAA8BC,IAAAA,uBAAY,EAACnB;QAEjD,IAAIiB,eAAe;gBAKbG;YAJJ,MAAM,EAAEC,GAAG,EAAEC,GAAG,EAAE,GAAGC,IAAAA,oBAAM,EAACN,eAAeO,iBAAU;YACrD,MAAMJ,cAA2B,MAAML,KAAKU,kBAAkB,CAACH;YAC/D,MAAMd,YAAwB,MAAMO,KAAKW,YAAY,CAACN,YAAYO,IAAI,CAACC,EAAE;YAEzE,IAAIR,CAAAA,wBAAAA,mCAAAA,oBAAAA,YAAaO,IAAI,cAAjBP,wCAAAA,kBAAmBS,IAAI,MAAKR,KAAK;gBACnC,IAAGH,iBAAiBY,MAAM,KAAKV,YAAYW,SAAS,EAAE;oBACpD/B,IAAIgC,UAAU,GAAGV;oBACjBtB,IAAI2B,IAAI,GAAGP,YAAYO,IAAI;oBAC3B3B,IAAIS,UAAU,GAAGD,UAAUyB,GAAG,CAACC,CAAAA,WAAYA,SAASC,IAAI,CAACC,IAAI;oBAE7D7B;gBACF,OAAO;oBACLA,KAAK,IAAIO,4BAAa,CAAC,OAAO,KAAK;gBACrC;YACF,OAAO;gBACLP,KAAK,IAAIO,4BAAa,CAAC,OAAO,KAAK;YACrC;QACF,OAAO;YACLP,KAAK,IAAIO,4BAAa,CAAC,OAAO,KAAK;QACrC;IACF,EAAE,OAAOuB,OAAO;QACd9B,KAAK,IAAIO,4BAAa,CAAC,OAAO,KAAK;IACrC;AACF"}