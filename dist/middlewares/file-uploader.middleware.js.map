{"version":3,"sources":["../../src/middlewares/file-uploader.middleware.ts"],"sourcesContent":["/**\n * Middleware for handling file uploads using multer and AWS S3.\n * Supports local disk storage in development and S3 in production.\n * Validates file type and size, and uploads to S3 if configured.\n */\nimport { Request } from \"express\"; // Express request type\nimport multer from \"multer\"; // Multer for file uploads\nimport AWS from \"aws-sdk\"; // AWS SDK for S3\n\nimport { HttpException } from \"@exceptions/HttpException\"; // Custom HTTP exception\nimport { MAX_SIZE_FILE_UPLOAD, NODE_ENV } from \"@config/index\"; // Config values\n\n// AWS S3 config\nconst s3 = new AWS.S3({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  region: process.env.AWS_REGION,\n});\nconst S3_BUCKET = process.env.AWS_S3_BUCKET;\n\n/**\n * Multer middleware for file upload.\n * - Limits: max 10 files, max size from config\n * - Storage: S3 (memory) in production, disk in development\n * - File filter: only image and application types (jpg, jpeg, png)\n */\nexport const uploadFile = multer({\n  limits: {\n    files: 10,\n    fileSize: Number(MAX_SIZE_FILE_UPLOAD),\n  },\n  storage:\n    NODE_ENV === 'production'\n      ? multer.memoryStorage()\n      : multer.diskStorage({\n          destination: (req, file, cb) => {\n            cb(null, 'uploads/');\n          },\n          filename: (req, file, cb) => {\n            cb(null, Date.now() + '-' + file.originalname);\n          },\n        }),\n  /**\n   * File filter to allow only specific mimetypes\n   */\n  fileFilter(req: Request, file: Express.Multer.File, callback: multer.FileFilterCallback) {\n    if (!file.mimetype.match(/^image|application\\/(jpg|jpeg|png)$/)) {\n      return callback(new HttpException(false, 400, \"Invalid File Format\"));\n    }\n    callback(null, true);\n  },\n});\n\n/**\n * Middleware to upload a file to AWS S3 after multer processes it.\n * Adds the S3 file URL to req.file.location on success.\n */\nexport const uploadToS3 = async (req: Request, res, next) => {\n  if (!req.file) return next();\n  const params = {\n    Bucket: S3_BUCKET,\n    Key: `${Date.now()}-${req.file.originalname}`,\n    Body: req.file.buffer,\n    ContentType: req.file.mimetype,\n    ACL: \"public-read\",\n  };\n  try {\n    const data = await s3.upload(params).promise();\n    (req.file as any).location = data.Location; // S3 file URL\n    next();\n  } catch (err) {\n    next(new HttpException(false, 500, \"S3 Upload Failed\"));\n  }\n};"],"names":["uploadFile","uploadToS3","s3","AWS","S3","accessKeyId","process","env","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","region","AWS_REGION","S3_BUCKET","AWS_S3_BUCKET","multer","limits","files","fileSize","Number","MAX_SIZE_FILE_UPLOAD","storage","NODE_ENV","memoryStorage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","fileFilter","callback","mimetype","match","HttpException","res","next","params","Bucket","Key","Body","buffer","ContentType","ACL","data","upload","promise","location","Location","err"],"mappings":";;;;;;;;;;;QA0BaA;eAAAA;;QA+BAC;eAAAA;;;+DAnDM;+DACH;+BAEc;uBACiB;;;;;;AAG/C,MAAMC,KAAK,IAAIC,eAAG,CAACC,EAAE,CAAC;IACpBC,aAAaC,QAAQC,GAAG,CAACC,iBAAiB;IAC1CC,iBAAiBH,QAAQC,GAAG,CAACG,qBAAqB;IAClDC,QAAQL,QAAQC,GAAG,CAACK,UAAU;AAChC;AACA,MAAMC,YAAYP,QAAQC,GAAG,CAACO,aAAa;AAQpC,MAAMd,aAAae,IAAAA,eAAM,EAAC;IAC/BC,QAAQ;QACNC,OAAO;QACPC,UAAUC,OAAOC,2BAAoB;IACvC;IACAC,SACEC,eAAQ,KAAK,eACTP,eAAM,CAACQ,aAAa,KACpBR,eAAM,CAACS,WAAW,CAAC;QACjBC,aAAa,CAACC,KAAKC,MAAMC;YACvBA,GAAG,MAAM;QACX;QACAC,UAAU,CAACH,KAAKC,MAAMC;YACpBA,GAAG,MAAME,KAAKC,GAAG,KAAK,MAAMJ,KAAKK,YAAY;QAC/C;IACF;IAINC,YAAWP,GAAY,EAAEC,IAAyB,EAAEO,QAAmC;QACrF,IAAI,CAACP,KAAKQ,QAAQ,CAACC,KAAK,CAAC,wCAAwC;YAC/D,OAAOF,SAAS,IAAIG,4BAAa,CAAC,OAAO,KAAK;QAChD;QACAH,SAAS,MAAM;IACjB;AACF;AAMO,MAAMjC,aAAa,OAAOyB,KAAcY,KAAKC;IAClD,IAAI,CAACb,IAAIC,IAAI,EAAE,OAAOY;IACtB,MAAMC,SAAS;QACbC,QAAQ5B;QACR6B,KAAK,GAAGZ,KAAKC,GAAG,GAAG,CAAC,EAAEL,IAAIC,IAAI,CAACK,YAAY,EAAE;QAC7CW,MAAMjB,IAAIC,IAAI,CAACiB,MAAM;QACrBC,aAAanB,IAAIC,IAAI,CAACQ,QAAQ;QAC9BW,KAAK;IACP;IACA,IAAI;QACF,MAAMC,OAAO,MAAM7C,GAAG8C,MAAM,CAACR,QAAQS,OAAO;QAC3CvB,IAAIC,IAAI,CAASuB,QAAQ,GAAGH,KAAKI,QAAQ;QAC1CZ;IACF,EAAE,OAAOa,KAAK;QACZb,KAAK,IAAIF,4BAAa,CAAC,OAAO,KAAK;IACrC;AACF"}