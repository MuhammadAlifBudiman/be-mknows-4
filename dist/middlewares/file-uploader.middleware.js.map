{"version":3,"sources":["../../src/middlewares/file-uploader.middleware.ts"],"sourcesContent":["import { Request } from \"express\";\nimport multer from \"multer\";\nimport AWS from \"aws-sdk\";\n\nimport { HttpException } from \"@exceptions/HttpException\";\nimport { MAX_SIZE_FILE_UPLOAD } from \"@config/index\";\nimport { logger } from \"@utils/logger\";\n\n// AWS S3 config\nconst s3 = new AWS.S3({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  region: process.env.AWS_REGION,\n});\nconst S3_BUCKET = process.env.AWS_S3_BUCKET;\n\nexport const uploadFile = multer({\n  limits: {\n    files: 10,\n    fileSize: Number(MAX_SIZE_FILE_UPLOAD),\n  },\n  storage: multer.memoryStorage(), // store in memory, not disk\n  fileFilter(req: Request, file: Express.Multer.File, callback: multer.FileFilterCallback) {\n    if (!file.mimetype.match(/^image|application\\/(jpg|jpeg|png)$/)) {\n      return callback(new HttpException(false, 400, \"Invalid File Format\"));\n    }\n    callback(null, true);\n  },\n});\n\n// Middleware to upload to S3 after multer\nexport const uploadToS3 = async (req: Request, res, next) => {\n  if (!req.file) return next();\n  const params = {\n    Bucket: S3_BUCKET,\n    Key: `${Date.now()}-${req.file.originalname}`,\n    Body: req.file.buffer,\n    ContentType: req.file.mimetype,\n    ACL: \"public-read\",\n  };\n  try {\n    const data = await s3.upload(params).promise();\n    (req.file as any).location = data.Location; // S3 file URL\n    next();\n  } catch (err) {\n    logger.error(`[S3 UPLOAD ERROR] ${err && err.message}`);\n    logger.error(`[S3 PARAMS] Bucket: ${S3_BUCKET}, Key: ${params.Key}, ContentType: ${params.ContentType}`);\n    logger.error(`[S3 ENV] AWS_ACCESS_KEY_ID: ${process.env.AWS_ACCESS_KEY_ID}, AWS_REGION: ${process.env.AWS_REGION}`);\n    next(new HttpException(false, 500, \"S3 Upload Failed\"));\n  }\n};"],"names":["uploadFile","uploadToS3","s3","AWS","S3","accessKeyId","process","env","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","region","AWS_REGION","S3_BUCKET","AWS_S3_BUCKET","multer","limits","files","fileSize","Number","MAX_SIZE_FILE_UPLOAD","storage","memoryStorage","fileFilter","req","file","callback","mimetype","match","HttpException","res","next","params","Bucket","Key","Date","now","originalname","Body","buffer","ContentType","ACL","data","upload","promise","location","Location","err","logger","error","message"],"mappings":";;;;;;;;;;;QAgBaA;eAAAA;;QAeAC;eAAAA;;;+DA9BM;+DACH;+BAEc;uBACO;wBACd;;;;;;AAGvB,MAAMC,KAAK,IAAIC,eAAG,CAACC,EAAE,CAAC;IACpBC,aAAaC,QAAQC,GAAG,CAACC,iBAAiB;IAC1CC,iBAAiBH,QAAQC,GAAG,CAACG,qBAAqB;IAClDC,QAAQL,QAAQC,GAAG,CAACK,UAAU;AAChC;AACA,MAAMC,YAAYP,QAAQC,GAAG,CAACO,aAAa;AAEpC,MAAMd,aAAae,IAAAA,eAAM,EAAC;IAC/BC,QAAQ;QACNC,OAAO;QACPC,UAAUC,OAAOC,2BAAoB;IACvC;IACAC,SAASN,eAAM,CAACO,aAAa;IAC7BC,YAAWC,GAAY,EAAEC,IAAyB,EAAEC,QAAmC;QACrF,IAAI,CAACD,KAAKE,QAAQ,CAACC,KAAK,CAAC,wCAAwC;YAC/D,OAAOF,SAAS,IAAIG,4BAAa,CAAC,OAAO,KAAK;QAChD;QACAH,SAAS,MAAM;IACjB;AACF;AAGO,MAAMzB,aAAa,OAAOuB,KAAcM,KAAKC;IAClD,IAAI,CAACP,IAAIC,IAAI,EAAE,OAAOM;IACtB,MAAMC,SAAS;QACbC,QAAQpB;QACRqB,KAAK,GAAGC,KAAKC,GAAG,GAAG,CAAC,EAAEZ,IAAIC,IAAI,CAACY,YAAY,EAAE;QAC7CC,MAAMd,IAAIC,IAAI,CAACc,MAAM;QACrBC,aAAahB,IAAIC,IAAI,CAACE,QAAQ;QAC9Bc,KAAK;IACP;IACA,IAAI;QACF,MAAMC,OAAO,MAAMxC,GAAGyC,MAAM,CAACX,QAAQY,OAAO;QAC3CpB,IAAIC,IAAI,CAASoB,QAAQ,GAAGH,KAAKI,QAAQ;QAC1Cf;IACF,EAAE,OAAOgB,KAAK;QACZC,cAAM,CAACC,KAAK,CAAC,CAAC,kBAAkB,EAAEF,OAAOA,IAAIG,OAAO,EAAE;QACtDF,cAAM,CAACC,KAAK,CAAC,CAAC,oBAAoB,EAAEpC,UAAU,OAAO,EAAEmB,OAAOE,GAAG,CAAC,eAAe,EAAEF,OAAOQ,WAAW,EAAE;QACvGQ,cAAM,CAACC,KAAK,CAAC,CAAC,4BAA4B,EAAE3C,QAAQC,GAAG,CAACC,iBAAiB,CAAC,cAAc,EAAEF,QAAQC,GAAG,CAACK,UAAU,EAAE;QAClHmB,KAAK,IAAIF,4BAAa,CAAC,OAAO,KAAK;IACrC;AACF"}